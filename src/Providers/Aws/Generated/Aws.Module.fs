namespace Nelknet.Cdktf.Providers

open Nelknet.Cdktf

module Aws =
    let accessanalyzerAnalyzer logicalId = AccessanalyzerAnalyzerBuilder(logicalId)
    let accessanalyzerArchiveRule logicalId = AccessanalyzerArchiveRuleBuilder(logicalId)
    let accountAlternateContact logicalId = AccountAlternateContactBuilder(logicalId)
    let accountPrimaryContact logicalId = AccountPrimaryContactBuilder(logicalId)
    let accountRegion logicalId = AccountRegionBuilder(logicalId)
    let acmCertificate logicalId = AcmCertificateBuilder(logicalId)
    let acmCertificateValidation logicalId = AcmCertificateValidationBuilder(logicalId)
    let acmpcaCertificate logicalId = AcmpcaCertificateBuilder(logicalId)
    let acmpcaCertificateAuthority logicalId = AcmpcaCertificateAuthorityBuilder(logicalId)
    let acmpcaCertificateAuthorityCertificate logicalId = AcmpcaCertificateAuthorityCertificateBuilder(logicalId)
    let acmpcaPermission logicalId = AcmpcaPermissionBuilder(logicalId)
    let acmpcaPolicy logicalId = AcmpcaPolicyBuilder(logicalId)
    let alb logicalId = AlbBuilder(logicalId)
    let albListener logicalId = AlbListenerBuilder(logicalId)
    let albListenerCertificate logicalId = AlbListenerCertificateBuilder(logicalId)
    let albListenerRule logicalId = AlbListenerRuleBuilder(logicalId)
    let albTargetGroup logicalId = AlbTargetGroupBuilder(logicalId)
    let albTargetGroupAttachment logicalId = AlbTargetGroupAttachmentBuilder(logicalId)
    let ami logicalId = AmiBuilder(logicalId)
    let amiCopy logicalId = AmiCopyBuilder(logicalId)
    let amiFromInstance logicalId = AmiFromInstanceBuilder(logicalId)
    let amiLaunchPermission logicalId = AmiLaunchPermissionBuilder(logicalId)
    let amplifyApp logicalId = AmplifyAppBuilder(logicalId)
    let amplifyBackendEnvironment logicalId = AmplifyBackendEnvironmentBuilder(logicalId)
    let amplifyBranch logicalId = AmplifyBranchBuilder(logicalId)
    let amplifyDomainAssociation logicalId = AmplifyDomainAssociationBuilder(logicalId)
    let amplifyWebhook logicalId = AmplifyWebhookBuilder(logicalId)
    let apiGatewayAccount logicalId = ApiGatewayAccountBuilder(logicalId)
    let apiGatewayApiKey logicalId = ApiGatewayApiKeyBuilder(logicalId)
    let apiGatewayAuthorizer logicalId = ApiGatewayAuthorizerBuilder(logicalId)
    let apiGatewayBasePathMapping logicalId = ApiGatewayBasePathMappingBuilder(logicalId)
    let apiGatewayClientCertificate logicalId = ApiGatewayClientCertificateBuilder(logicalId)
    let apiGatewayDeployment logicalId = ApiGatewayDeploymentBuilder(logicalId)
    let apiGatewayDocumentationPart logicalId = ApiGatewayDocumentationPartBuilder(logicalId)
    let apiGatewayDocumentationVersion logicalId = ApiGatewayDocumentationVersionBuilder(logicalId)
    let apiGatewayDomainName logicalId = ApiGatewayDomainNameBuilder(logicalId)
    let apiGatewayDomainNameAccessAssociation logicalId = ApiGatewayDomainNameAccessAssociationBuilder(logicalId)
    let apiGatewayGatewayResponse logicalId = ApiGatewayGatewayResponseBuilder(logicalId)
    let apiGatewayIntegration logicalId = ApiGatewayIntegrationBuilder(logicalId)
    let apiGatewayIntegrationResponse logicalId = ApiGatewayIntegrationResponseBuilder(logicalId)
    let apiGatewayMethod logicalId = ApiGatewayMethodBuilder(logicalId)
    let apiGatewayMethodResponse logicalId = ApiGatewayMethodResponseBuilder(logicalId)
    let apiGatewayMethodSettings logicalId = ApiGatewayMethodSettingsBuilder(logicalId)
    let apiGatewayModel logicalId = ApiGatewayModelBuilder(logicalId)
    let apiGatewayRequestValidator logicalId = ApiGatewayRequestValidatorBuilder(logicalId)
    let apiGatewayResource logicalId = ApiGatewayResourceBuilder(logicalId)
    let apiGatewayRestApi logicalId = ApiGatewayRestApiBuilder(logicalId)
    let apiGatewayRestApiPolicy logicalId = ApiGatewayRestApiPolicyBuilder(logicalId)
    let apiGatewayRestApiPut logicalId = ApiGatewayRestApiPutBuilder(logicalId)
    let apiGatewayStage logicalId = ApiGatewayStageBuilder(logicalId)
    let apiGatewayUsagePlan logicalId = ApiGatewayUsagePlanBuilder(logicalId)
    let apiGatewayUsagePlanKey logicalId = ApiGatewayUsagePlanKeyBuilder(logicalId)
    let apiGatewayVpcLink logicalId = ApiGatewayVpcLinkBuilder(logicalId)
    let apigatewayv2Api logicalId = Apigatewayv2ApiBuilder(logicalId)
    let apigatewayv2ApiMapping logicalId = Apigatewayv2ApiMappingBuilder(logicalId)
    let apigatewayv2Authorizer logicalId = Apigatewayv2AuthorizerBuilder(logicalId)
    let apigatewayv2Deployment logicalId = Apigatewayv2DeploymentBuilder(logicalId)
    let apigatewayv2DomainName logicalId = Apigatewayv2DomainNameBuilder(logicalId)
    let apigatewayv2Integration logicalId = Apigatewayv2IntegrationBuilder(logicalId)
    let apigatewayv2IntegrationResponse logicalId = Apigatewayv2IntegrationResponseBuilder(logicalId)
    let apigatewayv2Model logicalId = Apigatewayv2ModelBuilder(logicalId)
    let apigatewayv2Route logicalId = Apigatewayv2RouteBuilder(logicalId)
    let apigatewayv2RouteResponse logicalId = Apigatewayv2RouteResponseBuilder(logicalId)
    let apigatewayv2Stage logicalId = Apigatewayv2StageBuilder(logicalId)
    let apigatewayv2VpcLink logicalId = Apigatewayv2VpcLinkBuilder(logicalId)
    let appCookieStickinessPolicy logicalId = AppCookieStickinessPolicyBuilder(logicalId)
    let appautoscalingPolicy logicalId = AppautoscalingPolicyBuilder(logicalId)
    let appautoscalingScheduledAction logicalId = AppautoscalingScheduledActionBuilder(logicalId)
    let appautoscalingTarget logicalId = AppautoscalingTargetBuilder(logicalId)
    let appconfigApplication logicalId = AppconfigApplicationBuilder(logicalId)
    let appconfigConfigurationProfile logicalId = AppconfigConfigurationProfileBuilder(logicalId)
    let appconfigDeployment logicalId = AppconfigDeploymentBuilder(logicalId)
    let appconfigDeploymentStrategy logicalId = AppconfigDeploymentStrategyBuilder(logicalId)
    let appconfigEnvironment logicalId = AppconfigEnvironmentBuilder(logicalId)
    let appconfigExtension logicalId = AppconfigExtensionBuilder(logicalId)
    let appconfigExtensionAssociation logicalId = AppconfigExtensionAssociationBuilder(logicalId)
    let appconfigHostedConfigurationVersion logicalId = AppconfigHostedConfigurationVersionBuilder(logicalId)
    let appfabricAppAuthorization logicalId = AppfabricAppAuthorizationBuilder(logicalId)
    let appfabricAppAuthorizationConnection logicalId = AppfabricAppAuthorizationConnectionBuilder(logicalId)
    let appfabricAppBundle logicalId = AppfabricAppBundleBuilder(logicalId)
    let appfabricIngestion logicalId = AppfabricIngestionBuilder(logicalId)
    let appfabricIngestionDestination logicalId = AppfabricIngestionDestinationBuilder(logicalId)
    let appflowConnectorProfile logicalId = AppflowConnectorProfileBuilder(logicalId)
    let appflowFlow logicalId = AppflowFlowBuilder(logicalId)
    let appintegrationsDataIntegration logicalId = AppintegrationsDataIntegrationBuilder(logicalId)
    let appintegrationsEventIntegration logicalId = AppintegrationsEventIntegrationBuilder(logicalId)
    let applicationinsightsApplication logicalId = ApplicationinsightsApplicationBuilder(logicalId)
    let appmeshGatewayRoute logicalId = AppmeshGatewayRouteBuilder(logicalId)
    let appmeshMesh logicalId = AppmeshMeshBuilder(logicalId)
    let appmeshRoute logicalId = AppmeshRouteBuilder(logicalId)
    let appmeshVirtualGateway logicalId = AppmeshVirtualGatewayBuilder(logicalId)
    let appmeshVirtualNode logicalId = AppmeshVirtualNodeBuilder(logicalId)
    let appmeshVirtualRouter logicalId = AppmeshVirtualRouterBuilder(logicalId)
    let appmeshVirtualService logicalId = AppmeshVirtualServiceBuilder(logicalId)
    let apprunnerAutoScalingConfigurationVersion logicalId = ApprunnerAutoScalingConfigurationVersionBuilder(logicalId)
    let apprunnerConnection logicalId = ApprunnerConnectionBuilder(logicalId)
    let apprunnerCustomDomainAssociation logicalId = ApprunnerCustomDomainAssociationBuilder(logicalId)
    let apprunnerDefaultAutoScalingConfigurationVersion logicalId = ApprunnerDefaultAutoScalingConfigurationVersionBuilder(logicalId)
    let apprunnerDeployment logicalId = ApprunnerDeploymentBuilder(logicalId)
    let apprunnerObservabilityConfiguration logicalId = ApprunnerObservabilityConfigurationBuilder(logicalId)
    let apprunnerService logicalId = ApprunnerServiceBuilder(logicalId)
    let apprunnerVpcConnector logicalId = ApprunnerVpcConnectorBuilder(logicalId)
    let apprunnerVpcIngressConnection logicalId = ApprunnerVpcIngressConnectionBuilder(logicalId)
    let appstreamDirectoryConfig logicalId = AppstreamDirectoryConfigBuilder(logicalId)
    let appstreamFleet logicalId = AppstreamFleetBuilder(logicalId)
    let appstreamFleetStackAssociation logicalId = AppstreamFleetStackAssociationBuilder(logicalId)
    let appstreamImageBuilder logicalId = AppstreamImageBuilderBuilder(logicalId)
    let appstreamStack logicalId = AppstreamStackBuilder(logicalId)
    let appstreamUser logicalId = AppstreamUserBuilder(logicalId)
    let appstreamUserStackAssociation logicalId = AppstreamUserStackAssociationBuilder(logicalId)
    let appsyncApiCache logicalId = AppsyncApiCacheBuilder(logicalId)
    let appsyncApiKey logicalId = AppsyncApiKeyBuilder(logicalId)
    let appsyncDatasource logicalId = AppsyncDatasourceBuilder(logicalId)
    let appsyncDomainName logicalId = AppsyncDomainNameBuilder(logicalId)
    let appsyncDomainNameApiAssociation logicalId = AppsyncDomainNameApiAssociationBuilder(logicalId)
    let appsyncFunction logicalId = AppsyncFunctionBuilder(logicalId)
    let appsyncGraphqlApi logicalId = AppsyncGraphqlApiBuilder(logicalId)
    let appsyncResolver logicalId = AppsyncResolverBuilder(logicalId)
    let appsyncSourceApiAssociation logicalId = AppsyncSourceApiAssociationBuilder(logicalId)
    let appsyncType logicalId = AppsyncTypeBuilder(logicalId)
    let athenaCapacityReservation logicalId = AthenaCapacityReservationBuilder(logicalId)
    let athenaDataCatalog logicalId = AthenaDataCatalogBuilder(logicalId)
    let athenaDatabase logicalId = AthenaDatabaseBuilder(logicalId)
    let athenaNamedQuery logicalId = AthenaNamedQueryBuilder(logicalId)
    let athenaPreparedStatement logicalId = AthenaPreparedStatementBuilder(logicalId)
    let athenaWorkgroup logicalId = AthenaWorkgroupBuilder(logicalId)
    let auditmanagerAccountRegistration logicalId = AuditmanagerAccountRegistrationBuilder(logicalId)
    let auditmanagerAssessment logicalId = AuditmanagerAssessmentBuilder(logicalId)
    let auditmanagerAssessmentDelegation logicalId = AuditmanagerAssessmentDelegationBuilder(logicalId)
    let auditmanagerAssessmentReport logicalId = AuditmanagerAssessmentReportBuilder(logicalId)
    let auditmanagerControl logicalId = AuditmanagerControlBuilder(logicalId)
    let auditmanagerFramework logicalId = AuditmanagerFrameworkBuilder(logicalId)
    let auditmanagerFrameworkShare logicalId = AuditmanagerFrameworkShareBuilder(logicalId)
    let auditmanagerOrganizationAdminAccountRegistration logicalId = AuditmanagerOrganizationAdminAccountRegistrationBuilder(logicalId)
    let autoscalingAttachment logicalId = AutoscalingAttachmentBuilder(logicalId)
    let autoscalingGroup logicalId = AutoscalingGroupBuilder(logicalId)
    let autoscalingGroupTagA logicalId = AutoscalingGroupTagABuilder(logicalId)
    let autoscalingLifecycleHook logicalId = AutoscalingLifecycleHookBuilder(logicalId)
    let autoscalingNotification logicalId = AutoscalingNotificationBuilder(logicalId)
    let autoscalingPolicy logicalId = AutoscalingPolicyBuilder(logicalId)
    let autoscalingSchedule logicalId = AutoscalingScheduleBuilder(logicalId)
    let autoscalingTrafficSourceAttachment logicalId = AutoscalingTrafficSourceAttachmentBuilder(logicalId)
    let autoscalingplansScalingPlan logicalId = AutoscalingplansScalingPlanBuilder(logicalId)
    let backupFramework logicalId = BackupFrameworkBuilder(logicalId)
    let backupGlobalSettings logicalId = BackupGlobalSettingsBuilder(logicalId)
    let backupLogicallyAirGappedVault logicalId = BackupLogicallyAirGappedVaultBuilder(logicalId)
    let backupPlan logicalId = BackupPlanBuilder(logicalId)
    let backupRegionSettings logicalId = BackupRegionSettingsBuilder(logicalId)
    let backupReportPlan logicalId = BackupReportPlanBuilder(logicalId)
    let backupRestoreTestingPlan logicalId = BackupRestoreTestingPlanBuilder(logicalId)
    let backupRestoreTestingSelection logicalId = BackupRestoreTestingSelectionBuilder(logicalId)
    let backupSelection logicalId = BackupSelectionBuilder(logicalId)
    let backupVault logicalId = BackupVaultBuilder(logicalId)
    let backupVaultLockConfiguration logicalId = BackupVaultLockConfigurationBuilder(logicalId)
    let backupVaultNotifications logicalId = BackupVaultNotificationsBuilder(logicalId)
    let backupVaultPolicy logicalId = BackupVaultPolicyBuilder(logicalId)
    let batchComputeEnvironment logicalId = BatchComputeEnvironmentBuilder(logicalId)
    let batchJobDefinition logicalId = BatchJobDefinitionBuilder(logicalId)
    let batchJobQueue logicalId = BatchJobQueueBuilder(logicalId)
    let batchSchedulingPolicy logicalId = BatchSchedulingPolicyBuilder(logicalId)
    let bcmdataexportsExport logicalId = BcmdataexportsExportBuilder(logicalId)
    let bedrockCustomModel logicalId = BedrockCustomModelBuilder(logicalId)
    let bedrockGuardrail logicalId = BedrockGuardrailBuilder(logicalId)
    let bedrockGuardrailVersion logicalId = BedrockGuardrailVersionBuilder(logicalId)
    let bedrockInferenceProfile logicalId = BedrockInferenceProfileBuilder(logicalId)
    let bedrockModelInvocationLoggingConfiguration logicalId = BedrockModelInvocationLoggingConfigurationBuilder(logicalId)
    let bedrockProvisionedModelThroughput logicalId = BedrockProvisionedModelThroughputBuilder(logicalId)
    let bedrockagentAgent logicalId = BedrockagentAgentBuilder(logicalId)
    let bedrockagentAgentActionGroup logicalId = BedrockagentAgentActionGroupBuilder(logicalId)
    let bedrockagentAgentAlias logicalId = BedrockagentAgentAliasBuilder(logicalId)
    let bedrockagentAgentCollaborator logicalId = BedrockagentAgentCollaboratorBuilder(logicalId)
    let bedrockagentAgentKnowledgeBaseAssociation logicalId = BedrockagentAgentKnowledgeBaseAssociationBuilder(logicalId)
    let bedrockagentDataSource logicalId = BedrockagentDataSourceBuilder(logicalId)
    let bedrockagentKnowledgeBase logicalId = BedrockagentKnowledgeBaseBuilder(logicalId)
    let bedrockagentPrompt logicalId = BedrockagentPromptBuilder(logicalId)
    let budgetsBudget logicalId = BudgetsBudgetBuilder(logicalId)
    let budgetsBudgetAction logicalId = BudgetsBudgetActionBuilder(logicalId)
    let ceAnomalyMonitor logicalId = CeAnomalyMonitorBuilder(logicalId)
    let ceAnomalySubscription logicalId = CeAnomalySubscriptionBuilder(logicalId)
    let ceCostAllocationTag logicalId = CeCostAllocationTagBuilder(logicalId)
    let ceCostCategory logicalId = CeCostCategoryBuilder(logicalId)
    let chatbotSlackChannelConfiguration logicalId = ChatbotSlackChannelConfigurationBuilder(logicalId)
    let chatbotTeamsChannelConfiguration logicalId = ChatbotTeamsChannelConfigurationBuilder(logicalId)
    let chimeVoiceConnector logicalId = ChimeVoiceConnectorBuilder(logicalId)
    let chimeVoiceConnectorGroup logicalId = ChimeVoiceConnectorGroupBuilder(logicalId)
    let chimeVoiceConnectorLogging logicalId = ChimeVoiceConnectorLoggingBuilder(logicalId)
    let chimeVoiceConnectorOrigination logicalId = ChimeVoiceConnectorOriginationBuilder(logicalId)
    let chimeVoiceConnectorStreaming logicalId = ChimeVoiceConnectorStreamingBuilder(logicalId)
    let chimeVoiceConnectorTermination logicalId = ChimeVoiceConnectorTerminationBuilder(logicalId)
    let chimeVoiceConnectorTerminationCredentials logicalId = ChimeVoiceConnectorTerminationCredentialsBuilder(logicalId)
    let chimesdkmediapipelinesMediaInsightsPipelineConfiguration logicalId = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationBuilder(logicalId)
    let chimesdkvoiceGlobalSettings logicalId = ChimesdkvoiceGlobalSettingsBuilder(logicalId)
    let chimesdkvoiceSipMediaApplication logicalId = ChimesdkvoiceSipMediaApplicationBuilder(logicalId)
    let chimesdkvoiceSipRule logicalId = ChimesdkvoiceSipRuleBuilder(logicalId)
    let chimesdkvoiceVoiceProfileDomain logicalId = ChimesdkvoiceVoiceProfileDomainBuilder(logicalId)
    let cleanroomsCollaboration logicalId = CleanroomsCollaborationBuilder(logicalId)
    let cleanroomsConfiguredTable logicalId = CleanroomsConfiguredTableBuilder(logicalId)
    let cleanroomsMembership logicalId = CleanroomsMembershipBuilder(logicalId)
    let cloud9EnvironmentEc2 logicalId = Cloud9EnvironmentEc2Builder(logicalId)
    let cloud9EnvironmentMembership logicalId = Cloud9EnvironmentMembershipBuilder(logicalId)
    let cloudcontrolapiResource logicalId = CloudcontrolapiResourceBuilder(logicalId)
    let cloudformationStack logicalId = CloudformationStackBuilder(logicalId)
    let cloudformationStackInstances logicalId = CloudformationStackInstancesBuilder(logicalId)
    let cloudformationStackSet logicalId = CloudformationStackSetBuilder(logicalId)
    let cloudformationStackSetInstance logicalId = CloudformationStackSetInstanceBuilder(logicalId)
    let cloudformationType logicalId = CloudformationTypeBuilder(logicalId)
    let cloudfrontCachePolicy logicalId = CloudfrontCachePolicyBuilder(logicalId)
    let cloudfrontContinuousDeploymentPolicy logicalId = CloudfrontContinuousDeploymentPolicyBuilder(logicalId)
    let cloudfrontDistribution logicalId = CloudfrontDistributionBuilder(logicalId)
    let cloudfrontFieldLevelEncryptionConfig logicalId = CloudfrontFieldLevelEncryptionConfigBuilder(logicalId)
    let cloudfrontFieldLevelEncryptionProfile logicalId = CloudfrontFieldLevelEncryptionProfileBuilder(logicalId)
    let cloudfrontFunction logicalId = CloudfrontFunctionBuilder(logicalId)
    let cloudfrontKeyGroup logicalId = CloudfrontKeyGroupBuilder(logicalId)
    let cloudfrontKeyValueStore logicalId = CloudfrontKeyValueStoreBuilder(logicalId)
    let cloudfrontMonitoringSubscription logicalId = CloudfrontMonitoringSubscriptionBuilder(logicalId)
    let cloudfrontOriginAccessControl logicalId = CloudfrontOriginAccessControlBuilder(logicalId)
    let cloudfrontOriginAccessIdentity logicalId = CloudfrontOriginAccessIdentityBuilder(logicalId)
    let cloudfrontOriginRequestPolicy logicalId = CloudfrontOriginRequestPolicyBuilder(logicalId)
    let cloudfrontPublicKey logicalId = CloudfrontPublicKeyBuilder(logicalId)
    let cloudfrontRealtimeLogConfig logicalId = CloudfrontRealtimeLogConfigBuilder(logicalId)
    let cloudfrontResponseHeadersPolicy logicalId = CloudfrontResponseHeadersPolicyBuilder(logicalId)
    let cloudfrontVpcOrigin logicalId = CloudfrontVpcOriginBuilder(logicalId)
    let cloudfrontkeyvaluestoreKey logicalId = CloudfrontkeyvaluestoreKeyBuilder(logicalId)
    let cloudfrontkeyvaluestoreKeysExclusive logicalId = CloudfrontkeyvaluestoreKeysExclusiveBuilder(logicalId)
    let cloudhsmV2Cluster logicalId = CloudhsmV2ClusterBuilder(logicalId)
    let cloudhsmV2Hsm logicalId = CloudhsmV2HsmBuilder(logicalId)
    let cloudsearchDomain logicalId = CloudsearchDomainBuilder(logicalId)
    let cloudsearchDomainServiceAccessPolicy logicalId = CloudsearchDomainServiceAccessPolicyBuilder(logicalId)
    let cloudtrail logicalId = CloudtrailBuilder(logicalId)
    let cloudtrailEventDataStore logicalId = CloudtrailEventDataStoreBuilder(logicalId)
    let cloudtrailOrganizationDelegatedAdminAccount logicalId = CloudtrailOrganizationDelegatedAdminAccountBuilder(logicalId)
    let cloudwatchCompositeAlarm logicalId = CloudwatchCompositeAlarmBuilder(logicalId)
    let cloudwatchContributorInsightRule logicalId = CloudwatchContributorInsightRuleBuilder(logicalId)
    let cloudwatchContributorManagedInsightRule logicalId = CloudwatchContributorManagedInsightRuleBuilder(logicalId)
    let cloudwatchDashboard logicalId = CloudwatchDashboardBuilder(logicalId)
    let cloudwatchEventApiDestination logicalId = CloudwatchEventApiDestinationBuilder(logicalId)
    let cloudwatchEventArchive logicalId = CloudwatchEventArchiveBuilder(logicalId)
    let cloudwatchEventBus logicalId = CloudwatchEventBusBuilder(logicalId)
    let cloudwatchEventBusPolicy logicalId = CloudwatchEventBusPolicyBuilder(logicalId)
    let cloudwatchEventConnection logicalId = CloudwatchEventConnectionBuilder(logicalId)
    let cloudwatchEventEndpoint logicalId = CloudwatchEventEndpointBuilder(logicalId)
    let cloudwatchEventPermission logicalId = CloudwatchEventPermissionBuilder(logicalId)
    let cloudwatchEventRule logicalId = CloudwatchEventRuleBuilder(logicalId)
    let cloudwatchEventTarget logicalId = CloudwatchEventTargetBuilder(logicalId)
    let cloudwatchLogAccountPolicy logicalId = CloudwatchLogAccountPolicyBuilder(logicalId)
    let cloudwatchLogAnomalyDetector logicalId = CloudwatchLogAnomalyDetectorBuilder(logicalId)
    let cloudwatchLogDataProtectionPolicy logicalId = CloudwatchLogDataProtectionPolicyBuilder(logicalId)
    let cloudwatchLogDelivery logicalId = CloudwatchLogDeliveryBuilder(logicalId)
    let cloudwatchLogDeliveryDestination logicalId = CloudwatchLogDeliveryDestinationBuilder(logicalId)
    let cloudwatchLogDeliveryDestinationPolicy logicalId = CloudwatchLogDeliveryDestinationPolicyBuilder(logicalId)
    let cloudwatchLogDeliverySource logicalId = CloudwatchLogDeliverySourceBuilder(logicalId)
    let cloudwatchLogDestination logicalId = CloudwatchLogDestinationBuilder(logicalId)
    let cloudwatchLogDestinationPolicy logicalId = CloudwatchLogDestinationPolicyBuilder(logicalId)
    let cloudwatchLogGroup logicalId = CloudwatchLogGroupBuilder(logicalId)
    let cloudwatchLogIndexPolicy logicalId = CloudwatchLogIndexPolicyBuilder(logicalId)
    let cloudwatchLogMetricFilter logicalId = CloudwatchLogMetricFilterBuilder(logicalId)
    let cloudwatchLogResourcePolicy logicalId = CloudwatchLogResourcePolicyBuilder(logicalId)
    let cloudwatchLogStream logicalId = CloudwatchLogStreamBuilder(logicalId)
    let cloudwatchLogSubscriptionFilter logicalId = CloudwatchLogSubscriptionFilterBuilder(logicalId)
    let cloudwatchMetricAlarm logicalId = CloudwatchMetricAlarmBuilder(logicalId)
    let cloudwatchMetricStream logicalId = CloudwatchMetricStreamBuilder(logicalId)
    let cloudwatchQueryDefinition logicalId = CloudwatchQueryDefinitionBuilder(logicalId)
    let codeartifactDomain logicalId = CodeartifactDomainBuilder(logicalId)
    let codeartifactDomainPermissionsPolicy logicalId = CodeartifactDomainPermissionsPolicyBuilder(logicalId)
    let codeartifactRepository logicalId = CodeartifactRepositoryBuilder(logicalId)
    let codeartifactRepositoryPermissionsPolicy logicalId = CodeartifactRepositoryPermissionsPolicyBuilder(logicalId)
    let codebuildFleet logicalId = CodebuildFleetBuilder(logicalId)
    let codebuildProject logicalId = CodebuildProjectBuilder(logicalId)
    let codebuildReportGroup logicalId = CodebuildReportGroupBuilder(logicalId)
    let codebuildResourcePolicy logicalId = CodebuildResourcePolicyBuilder(logicalId)
    let codebuildSourceCredential logicalId = CodebuildSourceCredentialBuilder(logicalId)
    let codebuildWebhook logicalId = CodebuildWebhookBuilder(logicalId)
    let codecatalystDevEnvironment logicalId = CodecatalystDevEnvironmentBuilder(logicalId)
    let codecatalystProject logicalId = CodecatalystProjectBuilder(logicalId)
    let codecatalystSourceRepository logicalId = CodecatalystSourceRepositoryBuilder(logicalId)
    let codecommitApprovalRuleTemplate logicalId = CodecommitApprovalRuleTemplateBuilder(logicalId)
    let codecommitApprovalRuleTemplateAssociation logicalId = CodecommitApprovalRuleTemplateAssociationBuilder(logicalId)
    let codecommitRepository logicalId = CodecommitRepositoryBuilder(logicalId)
    let codecommitTrigger logicalId = CodecommitTriggerBuilder(logicalId)
    let codeconnectionsConnection logicalId = CodeconnectionsConnectionBuilder(logicalId)
    let codeconnectionsHost logicalId = CodeconnectionsHostBuilder(logicalId)
    let codedeployApp logicalId = CodedeployAppBuilder(logicalId)
    let codedeployDeploymentConfig logicalId = CodedeployDeploymentConfigBuilder(logicalId)
    let codedeployDeploymentGroup logicalId = CodedeployDeploymentGroupBuilder(logicalId)
    let codeguruprofilerProfilingGroup logicalId = CodeguruprofilerProfilingGroupBuilder(logicalId)
    let codegurureviewerRepositoryAssociation logicalId = CodegurureviewerRepositoryAssociationBuilder(logicalId)
    let codepipeline logicalId = CodepipelineBuilder(logicalId)
    let codepipelineCustomActionType logicalId = CodepipelineCustomActionTypeBuilder(logicalId)
    let codepipelineWebhook logicalId = CodepipelineWebhookBuilder(logicalId)
    let codestarconnectionsConnection logicalId = CodestarconnectionsConnectionBuilder(logicalId)
    let codestarconnectionsHost logicalId = CodestarconnectionsHostBuilder(logicalId)
    let codestarnotificationsNotificationRule logicalId = CodestarnotificationsNotificationRuleBuilder(logicalId)
    let cognitoIdentityPool logicalId = CognitoIdentityPoolBuilder(logicalId)
    let cognitoIdentityPoolProviderPrincipalTag logicalId = CognitoIdentityPoolProviderPrincipalTagBuilder(logicalId)
    let cognitoIdentityPoolRolesAttachment logicalId = CognitoIdentityPoolRolesAttachmentBuilder(logicalId)
    let cognitoIdentityProvider logicalId = CognitoIdentityProviderBuilder(logicalId)
    let cognitoManagedUserPoolClient logicalId = CognitoManagedUserPoolClientBuilder(logicalId)
    let cognitoResourceServer logicalId = CognitoResourceServerBuilder(logicalId)
    let cognitoRiskConfiguration logicalId = CognitoRiskConfigurationBuilder(logicalId)
    let cognitoUser logicalId = CognitoUserBuilder(logicalId)
    let cognitoUserGroup logicalId = CognitoUserGroupBuilder(logicalId)
    let cognitoUserInGroup logicalId = CognitoUserInGroupBuilder(logicalId)
    let cognitoUserPool logicalId = CognitoUserPoolBuilder(logicalId)
    let cognitoUserPoolClient logicalId = CognitoUserPoolClientBuilder(logicalId)
    let cognitoUserPoolDomain logicalId = CognitoUserPoolDomainBuilder(logicalId)
    let cognitoUserPoolUiCustomization logicalId = CognitoUserPoolUiCustomizationBuilder(logicalId)
    let comprehendDocumentClassifier logicalId = ComprehendDocumentClassifierBuilder(logicalId)
    let comprehendEntityRecognizer logicalId = ComprehendEntityRecognizerBuilder(logicalId)
    let computeoptimizerEnrollmentStatus logicalId = ComputeoptimizerEnrollmentStatusBuilder(logicalId)
    let computeoptimizerRecommendationPreferences logicalId = ComputeoptimizerRecommendationPreferencesBuilder(logicalId)
    let configAggregateAuthorization logicalId = ConfigAggregateAuthorizationBuilder(logicalId)
    let configConfigRule logicalId = ConfigConfigRuleBuilder(logicalId)
    let configConfigurationAggregator logicalId = ConfigConfigurationAggregatorBuilder(logicalId)
    let configConfigurationRecorder logicalId = ConfigConfigurationRecorderBuilder(logicalId)
    let configConfigurationRecorderStatus logicalId = ConfigConfigurationRecorderStatusBuilder(logicalId)
    let configConformancePack logicalId = ConfigConformancePackBuilder(logicalId)
    let configDeliveryChannel logicalId = ConfigDeliveryChannelBuilder(logicalId)
    let configOrganizationConformancePack logicalId = ConfigOrganizationConformancePackBuilder(logicalId)
    let configOrganizationCustomPolicyRule logicalId = ConfigOrganizationCustomPolicyRuleBuilder(logicalId)
    let configOrganizationCustomRule logicalId = ConfigOrganizationCustomRuleBuilder(logicalId)
    let configOrganizationManagedRule logicalId = ConfigOrganizationManagedRuleBuilder(logicalId)
    let configRemediationConfiguration logicalId = ConfigRemediationConfigurationBuilder(logicalId)
    let configRetentionConfiguration logicalId = ConfigRetentionConfigurationBuilder(logicalId)
    let connectBotAssociation logicalId = ConnectBotAssociationBuilder(logicalId)
    let connectContactFlow logicalId = ConnectContactFlowBuilder(logicalId)
    let connectContactFlowModule logicalId = ConnectContactFlowModuleBuilder(logicalId)
    let connectHoursOfOperation logicalId = ConnectHoursOfOperationBuilder(logicalId)
    let connectInstance logicalId = ConnectInstanceBuilder(logicalId)
    let connectInstanceStorageConfig logicalId = ConnectInstanceStorageConfigBuilder(logicalId)
    let connectLambdaFunctionAssociation logicalId = ConnectLambdaFunctionAssociationBuilder(logicalId)
    let connectPhoneNumber logicalId = ConnectPhoneNumberBuilder(logicalId)
    let connectQueue logicalId = ConnectQueueBuilder(logicalId)
    let connectQuickConnect logicalId = ConnectQuickConnectBuilder(logicalId)
    let connectRoutingProfile logicalId = ConnectRoutingProfileBuilder(logicalId)
    let connectSecurityProfile logicalId = ConnectSecurityProfileBuilder(logicalId)
    let connectUser logicalId = ConnectUserBuilder(logicalId)
    let connectUserHierarchyGroup logicalId = ConnectUserHierarchyGroupBuilder(logicalId)
    let connectUserHierarchyStructure logicalId = ConnectUserHierarchyStructureBuilder(logicalId)
    let connectVocabulary logicalId = ConnectVocabularyBuilder(logicalId)
    let controltowerControl logicalId = ControltowerControlBuilder(logicalId)
    let controltowerLandingZone logicalId = ControltowerLandingZoneBuilder(logicalId)
    let costoptimizationhubEnrollmentStatus logicalId = CostoptimizationhubEnrollmentStatusBuilder(logicalId)
    let costoptimizationhubPreferences logicalId = CostoptimizationhubPreferencesBuilder(logicalId)
    let curReportDefinition logicalId = CurReportDefinitionBuilder(logicalId)
    let customerGateway logicalId = CustomerGatewayBuilder(logicalId)
    let customerprofilesDomain logicalId = CustomerprofilesDomainBuilder(logicalId)
    let customerprofilesProfile logicalId = CustomerprofilesProfileBuilder(logicalId)
    let dataAwsAccountPrimaryContact logicalId = DataAwsAccountPrimaryContactBuilder(logicalId)
    let dataAwsAcmCertificate logicalId = DataAwsAcmCertificateBuilder(logicalId)
    let dataAwsAcmpcaCertificate logicalId = DataAwsAcmpcaCertificateBuilder(logicalId)
    let dataAwsAcmpcaCertificateAuthority logicalId = DataAwsAcmpcaCertificateAuthorityBuilder(logicalId)
    let dataAwsAlb logicalId = DataAwsAlbBuilder(logicalId)
    let dataAwsAlbListener logicalId = DataAwsAlbListenerBuilder(logicalId)
    let dataAwsAlbTargetGroup logicalId = DataAwsAlbTargetGroupBuilder(logicalId)
    let dataAwsAmi logicalId = DataAwsAmiBuilder(logicalId)
    let dataAwsAmiIds logicalId = DataAwsAmiIdsBuilder(logicalId)
    let dataAwsApiGatewayApiKey logicalId = DataAwsApiGatewayApiKeyBuilder(logicalId)
    let dataAwsApiGatewayApiKeys logicalId = DataAwsApiGatewayApiKeysBuilder(logicalId)
    let dataAwsApiGatewayAuthorizer logicalId = DataAwsApiGatewayAuthorizerBuilder(logicalId)
    let dataAwsApiGatewayAuthorizers logicalId = DataAwsApiGatewayAuthorizersBuilder(logicalId)
    let dataAwsApiGatewayDomainName logicalId = DataAwsApiGatewayDomainNameBuilder(logicalId)
    let dataAwsApiGatewayExport logicalId = DataAwsApiGatewayExportBuilder(logicalId)
    let dataAwsApiGatewayResource logicalId = DataAwsApiGatewayResourceBuilder(logicalId)
    let dataAwsApiGatewayRestApi logicalId = DataAwsApiGatewayRestApiBuilder(logicalId)
    let dataAwsApiGatewaySdk logicalId = DataAwsApiGatewaySdkBuilder(logicalId)
    let dataAwsApiGatewayVpcLink logicalId = DataAwsApiGatewayVpcLinkBuilder(logicalId)
    let dataAwsApigatewayv2Api logicalId = DataAwsApigatewayv2ApiBuilder(logicalId)
    let dataAwsApigatewayv2Apis logicalId = DataAwsApigatewayv2ApisBuilder(logicalId)
    let dataAwsApigatewayv2Export logicalId = DataAwsApigatewayv2ExportBuilder(logicalId)
    let dataAwsApigatewayv2VpcLink logicalId = DataAwsApigatewayv2VpcLinkBuilder(logicalId)
    let dataAwsAppconfigConfigurationProfile logicalId = DataAwsAppconfigConfigurationProfileBuilder(logicalId)
    let dataAwsAppconfigConfigurationProfiles logicalId = DataAwsAppconfigConfigurationProfilesBuilder(logicalId)
    let dataAwsAppconfigEnvironment logicalId = DataAwsAppconfigEnvironmentBuilder(logicalId)
    let dataAwsAppconfigEnvironments logicalId = DataAwsAppconfigEnvironmentsBuilder(logicalId)
    let dataAwsAppintegrationsEventIntegration logicalId = DataAwsAppintegrationsEventIntegrationBuilder(logicalId)
    let dataAwsAppmeshGatewayRoute logicalId = DataAwsAppmeshGatewayRouteBuilder(logicalId)
    let dataAwsAppmeshMesh logicalId = DataAwsAppmeshMeshBuilder(logicalId)
    let dataAwsAppmeshRoute logicalId = DataAwsAppmeshRouteBuilder(logicalId)
    let dataAwsAppmeshVirtualGateway logicalId = DataAwsAppmeshVirtualGatewayBuilder(logicalId)
    let dataAwsAppmeshVirtualNode logicalId = DataAwsAppmeshVirtualNodeBuilder(logicalId)
    let dataAwsAppmeshVirtualRouter logicalId = DataAwsAppmeshVirtualRouterBuilder(logicalId)
    let dataAwsAppmeshVirtualService logicalId = DataAwsAppmeshVirtualServiceBuilder(logicalId)
    let dataAwsApprunnerHostedZoneId logicalId = DataAwsApprunnerHostedZoneIdBuilder(logicalId)
    let dataAwsAppstreamImage logicalId = DataAwsAppstreamImageBuilder(logicalId)
    let dataAwsArn logicalId = DataAwsArnBuilder(logicalId)
    let dataAwsAthenaNamedQuery logicalId = DataAwsAthenaNamedQueryBuilder(logicalId)
    let dataAwsAuditmanagerControl logicalId = DataAwsAuditmanagerControlBuilder(logicalId)
    let dataAwsAuditmanagerFramework logicalId = DataAwsAuditmanagerFrameworkBuilder(logicalId)
    let dataAwsAutoscalingGroup logicalId = DataAwsAutoscalingGroupBuilder(logicalId)
    let dataAwsAutoscalingGroups logicalId = DataAwsAutoscalingGroupsBuilder(logicalId)
    let dataAwsAvailabilityZone logicalId = DataAwsAvailabilityZoneBuilder(logicalId)
    let dataAwsAvailabilityZones logicalId = DataAwsAvailabilityZonesBuilder(logicalId)
    let dataAwsBackupFramework logicalId = DataAwsBackupFrameworkBuilder(logicalId)
    let dataAwsBackupPlan logicalId = DataAwsBackupPlanBuilder(logicalId)
    let dataAwsBackupReportPlan logicalId = DataAwsBackupReportPlanBuilder(logicalId)
    let dataAwsBackupSelection logicalId = DataAwsBackupSelectionBuilder(logicalId)
    let dataAwsBackupVault logicalId = DataAwsBackupVaultBuilder(logicalId)
    let dataAwsBatchComputeEnvironment logicalId = DataAwsBatchComputeEnvironmentBuilder(logicalId)
    let dataAwsBatchJobDefinition logicalId = DataAwsBatchJobDefinitionBuilder(logicalId)
    let dataAwsBatchJobQueue logicalId = DataAwsBatchJobQueueBuilder(logicalId)
    let dataAwsBatchSchedulingPolicy logicalId = DataAwsBatchSchedulingPolicyBuilder(logicalId)
    let dataAwsBedrockCustomModel logicalId = DataAwsBedrockCustomModelBuilder(logicalId)
    let dataAwsBedrockCustomModels logicalId = DataAwsBedrockCustomModelsBuilder(logicalId)
    let dataAwsBedrockFoundationModel logicalId = DataAwsBedrockFoundationModelBuilder(logicalId)
    let dataAwsBedrockFoundationModels logicalId = DataAwsBedrockFoundationModelsBuilder(logicalId)
    let dataAwsBedrockInferenceProfile logicalId = DataAwsBedrockInferenceProfileBuilder(logicalId)
    let dataAwsBedrockInferenceProfiles logicalId = DataAwsBedrockInferenceProfilesBuilder(logicalId)
    let dataAwsBedrockagentAgentVersions logicalId = DataAwsBedrockagentAgentVersionsBuilder(logicalId)
    let dataAwsBillingServiceAccount logicalId = DataAwsBillingServiceAccountBuilder(logicalId)
    let dataAwsBudgetsBudget logicalId = DataAwsBudgetsBudgetBuilder(logicalId)
    let dataAwsCallerIdentity logicalId = DataAwsCallerIdentityBuilder(logicalId)
    let dataAwsCanonicalUserId logicalId = DataAwsCanonicalUserIdBuilder(logicalId)
    let dataAwsCeCostCategory logicalId = DataAwsCeCostCategoryBuilder(logicalId)
    let dataAwsCeTags logicalId = DataAwsCeTagsBuilder(logicalId)
    let dataAwsChatbotSlackWorkspace logicalId = DataAwsChatbotSlackWorkspaceBuilder(logicalId)
    let dataAwsCloudcontrolapiResource logicalId = DataAwsCloudcontrolapiResourceBuilder(logicalId)
    let dataAwsCloudformationExport logicalId = DataAwsCloudformationExportBuilder(logicalId)
    let dataAwsCloudformationStack logicalId = DataAwsCloudformationStackBuilder(logicalId)
    let dataAwsCloudformationType logicalId = DataAwsCloudformationTypeBuilder(logicalId)
    let dataAwsCloudfrontCachePolicy logicalId = DataAwsCloudfrontCachePolicyBuilder(logicalId)
    let dataAwsCloudfrontDistribution logicalId = DataAwsCloudfrontDistributionBuilder(logicalId)
    let dataAwsCloudfrontFunction logicalId = DataAwsCloudfrontFunctionBuilder(logicalId)
    let dataAwsCloudfrontLogDeliveryCanonicalUserId logicalId = DataAwsCloudfrontLogDeliveryCanonicalUserIdBuilder(logicalId)
    let dataAwsCloudfrontOriginAccessControl logicalId = DataAwsCloudfrontOriginAccessControlBuilder(logicalId)
    let dataAwsCloudfrontOriginAccessIdentities logicalId = DataAwsCloudfrontOriginAccessIdentitiesBuilder(logicalId)
    let dataAwsCloudfrontOriginAccessIdentity logicalId = DataAwsCloudfrontOriginAccessIdentityBuilder(logicalId)
    let dataAwsCloudfrontOriginRequestPolicy logicalId = DataAwsCloudfrontOriginRequestPolicyBuilder(logicalId)
    let dataAwsCloudfrontRealtimeLogConfig logicalId = DataAwsCloudfrontRealtimeLogConfigBuilder(logicalId)
    let dataAwsCloudfrontResponseHeadersPolicy logicalId = DataAwsCloudfrontResponseHeadersPolicyBuilder(logicalId)
    let dataAwsCloudhsmV2Cluster logicalId = DataAwsCloudhsmV2ClusterBuilder(logicalId)
    let dataAwsCloudtrailServiceAccount logicalId = DataAwsCloudtrailServiceAccountBuilder(logicalId)
    let dataAwsCloudwatchContributorManagedInsightRules logicalId = DataAwsCloudwatchContributorManagedInsightRulesBuilder(logicalId)
    let dataAwsCloudwatchEventBus logicalId = DataAwsCloudwatchEventBusBuilder(logicalId)
    let dataAwsCloudwatchEventBuses logicalId = DataAwsCloudwatchEventBusesBuilder(logicalId)
    let dataAwsCloudwatchEventConnection logicalId = DataAwsCloudwatchEventConnectionBuilder(logicalId)
    let dataAwsCloudwatchEventSource logicalId = DataAwsCloudwatchEventSourceBuilder(logicalId)
    let dataAwsCloudwatchLogDataProtectionPolicyDocument logicalId = DataAwsCloudwatchLogDataProtectionPolicyDocumentBuilder(logicalId)
    let dataAwsCloudwatchLogGroup logicalId = DataAwsCloudwatchLogGroupBuilder(logicalId)
    let dataAwsCloudwatchLogGroups logicalId = DataAwsCloudwatchLogGroupsBuilder(logicalId)
    let dataAwsCodeartifactAuthorizationToken logicalId = DataAwsCodeartifactAuthorizationTokenBuilder(logicalId)
    let dataAwsCodeartifactRepositoryEndpoint logicalId = DataAwsCodeartifactRepositoryEndpointBuilder(logicalId)
    let dataAwsCodebuildFleet logicalId = DataAwsCodebuildFleetBuilder(logicalId)
    let dataAwsCodecatalystDevEnvironment logicalId = DataAwsCodecatalystDevEnvironmentBuilder(logicalId)
    let dataAwsCodecommitApprovalRuleTemplate logicalId = DataAwsCodecommitApprovalRuleTemplateBuilder(logicalId)
    let dataAwsCodecommitRepository logicalId = DataAwsCodecommitRepositoryBuilder(logicalId)
    let dataAwsCodeguruprofilerProfilingGroup logicalId = DataAwsCodeguruprofilerProfilingGroupBuilder(logicalId)
    let dataAwsCodestarconnectionsConnection logicalId = DataAwsCodestarconnectionsConnectionBuilder(logicalId)
    let dataAwsCognitoIdentityPool logicalId = DataAwsCognitoIdentityPoolBuilder(logicalId)
    let dataAwsCognitoUserGroup logicalId = DataAwsCognitoUserGroupBuilder(logicalId)
    let dataAwsCognitoUserGroups logicalId = DataAwsCognitoUserGroupsBuilder(logicalId)
    let dataAwsCognitoUserPool logicalId = DataAwsCognitoUserPoolBuilder(logicalId)
    let dataAwsCognitoUserPoolClient logicalId = DataAwsCognitoUserPoolClientBuilder(logicalId)
    let dataAwsCognitoUserPoolClients logicalId = DataAwsCognitoUserPoolClientsBuilder(logicalId)
    let dataAwsCognitoUserPoolSigningCertificate logicalId = DataAwsCognitoUserPoolSigningCertificateBuilder(logicalId)
    let dataAwsCognitoUserPools logicalId = DataAwsCognitoUserPoolsBuilder(logicalId)
    let dataAwsConnectBotAssociation logicalId = DataAwsConnectBotAssociationBuilder(logicalId)
    let dataAwsConnectContactFlow logicalId = DataAwsConnectContactFlowBuilder(logicalId)
    let dataAwsConnectContactFlowModule logicalId = DataAwsConnectContactFlowModuleBuilder(logicalId)
    let dataAwsConnectHoursOfOperation logicalId = DataAwsConnectHoursOfOperationBuilder(logicalId)
    let dataAwsConnectInstance logicalId = DataAwsConnectInstanceBuilder(logicalId)
    let dataAwsConnectInstanceStorageConfig logicalId = DataAwsConnectInstanceStorageConfigBuilder(logicalId)
    let dataAwsConnectLambdaFunctionAssociation logicalId = DataAwsConnectLambdaFunctionAssociationBuilder(logicalId)
    let dataAwsConnectPrompt logicalId = DataAwsConnectPromptBuilder(logicalId)
    let dataAwsConnectQueue logicalId = DataAwsConnectQueueBuilder(logicalId)
    let dataAwsConnectQuickConnect logicalId = DataAwsConnectQuickConnectBuilder(logicalId)
    let dataAwsConnectRoutingProfile logicalId = DataAwsConnectRoutingProfileBuilder(logicalId)
    let dataAwsConnectSecurityProfile logicalId = DataAwsConnectSecurityProfileBuilder(logicalId)
    let dataAwsConnectUser logicalId = DataAwsConnectUserBuilder(logicalId)
    let dataAwsConnectUserHierarchyGroup logicalId = DataAwsConnectUserHierarchyGroupBuilder(logicalId)
    let dataAwsConnectUserHierarchyStructure logicalId = DataAwsConnectUserHierarchyStructureBuilder(logicalId)
    let dataAwsConnectVocabulary logicalId = DataAwsConnectVocabularyBuilder(logicalId)
    let dataAwsControltowerControls logicalId = DataAwsControltowerControlsBuilder(logicalId)
    let dataAwsCurReportDefinition logicalId = DataAwsCurReportDefinitionBuilder(logicalId)
    let dataAwsCustomerGateway logicalId = DataAwsCustomerGatewayBuilder(logicalId)
    let dataAwsDatapipelinePipeline logicalId = DataAwsDatapipelinePipelineBuilder(logicalId)
    let dataAwsDatapipelinePipelineDefinition logicalId = DataAwsDatapipelinePipelineDefinitionBuilder(logicalId)
    let dataAwsDatazoneDomain logicalId = DataAwsDatazoneDomainBuilder(logicalId)
    let dataAwsDatazoneEnvironmentBlueprint logicalId = DataAwsDatazoneEnvironmentBlueprintBuilder(logicalId)
    let dataAwsDbClusterSnapshot logicalId = DataAwsDbClusterSnapshotBuilder(logicalId)
    let dataAwsDbEventCategories logicalId = DataAwsDbEventCategoriesBuilder(logicalId)
    let dataAwsDbInstance logicalId = DataAwsDbInstanceBuilder(logicalId)
    let dataAwsDbInstances logicalId = DataAwsDbInstancesBuilder(logicalId)
    let dataAwsDbParameterGroup logicalId = DataAwsDbParameterGroupBuilder(logicalId)
    let dataAwsDbProxy logicalId = DataAwsDbProxyBuilder(logicalId)
    let dataAwsDbSnapshot logicalId = DataAwsDbSnapshotBuilder(logicalId)
    let dataAwsDbSubnetGroup logicalId = DataAwsDbSubnetGroupBuilder(logicalId)
    let dataAwsDefaultTags logicalId = DataAwsDefaultTagsBuilder(logicalId)
    let dataAwsDevopsguruNotificationChannel logicalId = DataAwsDevopsguruNotificationChannelBuilder(logicalId)
    let dataAwsDevopsguruResourceCollection logicalId = DataAwsDevopsguruResourceCollectionBuilder(logicalId)
    let dataAwsDirectoryServiceDirectory logicalId = DataAwsDirectoryServiceDirectoryBuilder(logicalId)
    let dataAwsDmsCertificate logicalId = DataAwsDmsCertificateBuilder(logicalId)
    let dataAwsDmsEndpoint logicalId = DataAwsDmsEndpointBuilder(logicalId)
    let dataAwsDmsReplicationInstance logicalId = DataAwsDmsReplicationInstanceBuilder(logicalId)
    let dataAwsDmsReplicationSubnetGroup logicalId = DataAwsDmsReplicationSubnetGroupBuilder(logicalId)
    let dataAwsDmsReplicationTask logicalId = DataAwsDmsReplicationTaskBuilder(logicalId)
    let dataAwsDocdbEngineVersion logicalId = DataAwsDocdbEngineVersionBuilder(logicalId)
    let dataAwsDocdbOrderableDbInstance logicalId = DataAwsDocdbOrderableDbInstanceBuilder(logicalId)
    let dataAwsDxConnection logicalId = DataAwsDxConnectionBuilder(logicalId)
    let dataAwsDxGateway logicalId = DataAwsDxGatewayBuilder(logicalId)
    let dataAwsDxLocation logicalId = DataAwsDxLocationBuilder(logicalId)
    let dataAwsDxLocations logicalId = DataAwsDxLocationsBuilder(logicalId)
    let dataAwsDxRouterConfiguration logicalId = DataAwsDxRouterConfigurationBuilder(logicalId)
    let dataAwsDynamodbTable logicalId = DataAwsDynamodbTableBuilder(logicalId)
    let dataAwsDynamodbTableItem logicalId = DataAwsDynamodbTableItemBuilder(logicalId)
    let dataAwsDynamodbTables logicalId = DataAwsDynamodbTablesBuilder(logicalId)
    let dataAwsEbsDefaultKmsKey logicalId = DataAwsEbsDefaultKmsKeyBuilder(logicalId)
    let dataAwsEbsEncryptionByDefault logicalId = DataAwsEbsEncryptionByDefaultBuilder(logicalId)
    let dataAwsEbsSnapshot logicalId = DataAwsEbsSnapshotBuilder(logicalId)
    let dataAwsEbsSnapshotIds logicalId = DataAwsEbsSnapshotIdsBuilder(logicalId)
    let dataAwsEbsVolume logicalId = DataAwsEbsVolumeBuilder(logicalId)
    let dataAwsEbsVolumes logicalId = DataAwsEbsVolumesBuilder(logicalId)
    let dataAwsEc2CapacityBlockOffering logicalId = DataAwsEc2CapacityBlockOfferingBuilder(logicalId)
    let dataAwsEc2ClientVpnEndpoint logicalId = DataAwsEc2ClientVpnEndpointBuilder(logicalId)
    let dataAwsEc2CoipPool logicalId = DataAwsEc2CoipPoolBuilder(logicalId)
    let dataAwsEc2CoipPools logicalId = DataAwsEc2CoipPoolsBuilder(logicalId)
    let dataAwsEc2Host logicalId = DataAwsEc2HostBuilder(logicalId)
    let dataAwsEc2InstanceType logicalId = DataAwsEc2InstanceTypeBuilder(logicalId)
    let dataAwsEc2InstanceTypeOffering logicalId = DataAwsEc2InstanceTypeOfferingBuilder(logicalId)
    let dataAwsEc2InstanceTypeOfferings logicalId = DataAwsEc2InstanceTypeOfferingsBuilder(logicalId)
    let dataAwsEc2InstanceTypes logicalId = DataAwsEc2InstanceTypesBuilder(logicalId)
    let dataAwsEc2LocalGateway logicalId = DataAwsEc2LocalGatewayBuilder(logicalId)
    let dataAwsEc2LocalGatewayRouteTable logicalId = DataAwsEc2LocalGatewayRouteTableBuilder(logicalId)
    let dataAwsEc2LocalGatewayRouteTables logicalId = DataAwsEc2LocalGatewayRouteTablesBuilder(logicalId)
    let dataAwsEc2LocalGatewayVirtualInterface logicalId = DataAwsEc2LocalGatewayVirtualInterfaceBuilder(logicalId)
    let dataAwsEc2LocalGatewayVirtualInterfaceGroup logicalId = DataAwsEc2LocalGatewayVirtualInterfaceGroupBuilder(logicalId)
    let dataAwsEc2LocalGatewayVirtualInterfaceGroups logicalId = DataAwsEc2LocalGatewayVirtualInterfaceGroupsBuilder(logicalId)
    let dataAwsEc2LocalGateways logicalId = DataAwsEc2LocalGatewaysBuilder(logicalId)
    let dataAwsEc2ManagedPrefixList logicalId = DataAwsEc2ManagedPrefixListBuilder(logicalId)
    let dataAwsEc2ManagedPrefixLists logicalId = DataAwsEc2ManagedPrefixListsBuilder(logicalId)
    let dataAwsEc2NetworkInsightsAnalysis logicalId = DataAwsEc2NetworkInsightsAnalysisBuilder(logicalId)
    let dataAwsEc2NetworkInsightsPath logicalId = DataAwsEc2NetworkInsightsPathBuilder(logicalId)
    let dataAwsEc2PublicIpv4Pool logicalId = DataAwsEc2PublicIpv4PoolBuilder(logicalId)
    let dataAwsEc2PublicIpv4Pools logicalId = DataAwsEc2PublicIpv4PoolsBuilder(logicalId)
    let dataAwsEc2SerialConsoleAccess logicalId = DataAwsEc2SerialConsoleAccessBuilder(logicalId)
    let dataAwsEc2SpotPrice logicalId = DataAwsEc2SpotPriceBuilder(logicalId)
    let dataAwsEc2TransitGateway logicalId = DataAwsEc2TransitGatewayBuilder(logicalId)
    let dataAwsEc2TransitGatewayAttachment logicalId = DataAwsEc2TransitGatewayAttachmentBuilder(logicalId)
    let dataAwsEc2TransitGatewayAttachments logicalId = DataAwsEc2TransitGatewayAttachmentsBuilder(logicalId)
    let dataAwsEc2TransitGatewayConnect logicalId = DataAwsEc2TransitGatewayConnectBuilder(logicalId)
    let dataAwsEc2TransitGatewayConnectPeer logicalId = DataAwsEc2TransitGatewayConnectPeerBuilder(logicalId)
    let dataAwsEc2TransitGatewayDxGatewayAttachment logicalId = DataAwsEc2TransitGatewayDxGatewayAttachmentBuilder(logicalId)
    let dataAwsEc2TransitGatewayMulticastDomain logicalId = DataAwsEc2TransitGatewayMulticastDomainBuilder(logicalId)
    let dataAwsEc2TransitGatewayPeeringAttachment logicalId = DataAwsEc2TransitGatewayPeeringAttachmentBuilder(logicalId)
    let dataAwsEc2TransitGatewayPeeringAttachments logicalId = DataAwsEc2TransitGatewayPeeringAttachmentsBuilder(logicalId)
    let dataAwsEc2TransitGatewayRouteTable logicalId = DataAwsEc2TransitGatewayRouteTableBuilder(logicalId)
    let dataAwsEc2TransitGatewayRouteTableAssociations logicalId = DataAwsEc2TransitGatewayRouteTableAssociationsBuilder(logicalId)
    let dataAwsEc2TransitGatewayRouteTablePropagations logicalId = DataAwsEc2TransitGatewayRouteTablePropagationsBuilder(logicalId)
    let dataAwsEc2TransitGatewayRouteTableRoutes logicalId = DataAwsEc2TransitGatewayRouteTableRoutesBuilder(logicalId)
    let dataAwsEc2TransitGatewayRouteTables logicalId = DataAwsEc2TransitGatewayRouteTablesBuilder(logicalId)
    let dataAwsEc2TransitGatewayVpcAttachment logicalId = DataAwsEc2TransitGatewayVpcAttachmentBuilder(logicalId)
    let dataAwsEc2TransitGatewayVpcAttachments logicalId = DataAwsEc2TransitGatewayVpcAttachmentsBuilder(logicalId)
    let dataAwsEc2TransitGatewayVpnAttachment logicalId = DataAwsEc2TransitGatewayVpnAttachmentBuilder(logicalId)
    let dataAwsEcrAuthorizationToken logicalId = DataAwsEcrAuthorizationTokenBuilder(logicalId)
    let dataAwsEcrImage logicalId = DataAwsEcrImageBuilder(logicalId)
    let dataAwsEcrLifecyclePolicyDocument logicalId = DataAwsEcrLifecyclePolicyDocumentBuilder(logicalId)
    let dataAwsEcrPullThroughCacheRule logicalId = DataAwsEcrPullThroughCacheRuleBuilder(logicalId)
    let dataAwsEcrRepositories logicalId = DataAwsEcrRepositoriesBuilder(logicalId)
    let dataAwsEcrRepository logicalId = DataAwsEcrRepositoryBuilder(logicalId)
    let dataAwsEcrRepositoryCreationTemplate logicalId = DataAwsEcrRepositoryCreationTemplateBuilder(logicalId)
    let dataAwsEcrpublicAuthorizationToken logicalId = DataAwsEcrpublicAuthorizationTokenBuilder(logicalId)
    let dataAwsEcsCluster logicalId = DataAwsEcsClusterBuilder(logicalId)
    let dataAwsEcsClusters logicalId = DataAwsEcsClustersBuilder(logicalId)
    let dataAwsEcsContainerDefinition logicalId = DataAwsEcsContainerDefinitionBuilder(logicalId)
    let dataAwsEcsService logicalId = DataAwsEcsServiceBuilder(logicalId)
    let dataAwsEcsTaskDefinition logicalId = DataAwsEcsTaskDefinitionBuilder(logicalId)
    let dataAwsEcsTaskExecution logicalId = DataAwsEcsTaskExecutionBuilder(logicalId)
    let dataAwsEfsAccessPoint logicalId = DataAwsEfsAccessPointBuilder(logicalId)
    let dataAwsEfsAccessPoints logicalId = DataAwsEfsAccessPointsBuilder(logicalId)
    let dataAwsEfsFileSystem logicalId = DataAwsEfsFileSystemBuilder(logicalId)
    let dataAwsEfsMountTarget logicalId = DataAwsEfsMountTargetBuilder(logicalId)
    let dataAwsEip logicalId = DataAwsEipBuilder(logicalId)
    let dataAwsEips logicalId = DataAwsEipsBuilder(logicalId)
    let dataAwsEksAccessEntry logicalId = DataAwsEksAccessEntryBuilder(logicalId)
    let dataAwsEksAddon logicalId = DataAwsEksAddonBuilder(logicalId)
    let dataAwsEksAddonVersion logicalId = DataAwsEksAddonVersionBuilder(logicalId)
    let dataAwsEksCluster logicalId = DataAwsEksClusterBuilder(logicalId)
    let dataAwsEksClusterAuth logicalId = DataAwsEksClusterAuthBuilder(logicalId)
    let dataAwsEksClusterVersions logicalId = DataAwsEksClusterVersionsBuilder(logicalId)
    let dataAwsEksClusters logicalId = DataAwsEksClustersBuilder(logicalId)
    let dataAwsEksNodeGroup logicalId = DataAwsEksNodeGroupBuilder(logicalId)
    let dataAwsEksNodeGroups logicalId = DataAwsEksNodeGroupsBuilder(logicalId)
    let dataAwsElasticBeanstalkApplication logicalId = DataAwsElasticBeanstalkApplicationBuilder(logicalId)
    let dataAwsElasticBeanstalkHostedZone logicalId = DataAwsElasticBeanstalkHostedZoneBuilder(logicalId)
    let dataAwsElasticBeanstalkSolutionStack logicalId = DataAwsElasticBeanstalkSolutionStackBuilder(logicalId)
    let dataAwsElasticacheCluster logicalId = DataAwsElasticacheClusterBuilder(logicalId)
    let dataAwsElasticacheReplicationGroup logicalId = DataAwsElasticacheReplicationGroupBuilder(logicalId)
    let dataAwsElasticacheReservedCacheNodeOffering logicalId = DataAwsElasticacheReservedCacheNodeOfferingBuilder(logicalId)
    let dataAwsElasticacheServerlessCache logicalId = DataAwsElasticacheServerlessCacheBuilder(logicalId)
    let dataAwsElasticacheSubnetGroup logicalId = DataAwsElasticacheSubnetGroupBuilder(logicalId)
    let dataAwsElasticacheUser logicalId = DataAwsElasticacheUserBuilder(logicalId)
    let dataAwsElasticsearchDomain logicalId = DataAwsElasticsearchDomainBuilder(logicalId)
    let dataAwsElb logicalId = DataAwsElbBuilder(logicalId)
    let dataAwsElbHostedZoneId logicalId = DataAwsElbHostedZoneIdBuilder(logicalId)
    let dataAwsElbServiceAccount logicalId = DataAwsElbServiceAccountBuilder(logicalId)
    let dataAwsEmrReleaseLabels logicalId = DataAwsEmrReleaseLabelsBuilder(logicalId)
    let dataAwsEmrSupportedInstanceTypes logicalId = DataAwsEmrSupportedInstanceTypesBuilder(logicalId)
    let dataAwsEmrcontainersVirtualCluster logicalId = DataAwsEmrcontainersVirtualClusterBuilder(logicalId)
    let dataAwsFisExperimentTemplates logicalId = DataAwsFisExperimentTemplatesBuilder(logicalId)
    let dataAwsFsxOntapFileSystem logicalId = DataAwsFsxOntapFileSystemBuilder(logicalId)
    let dataAwsFsxOntapStorageVirtualMachine logicalId = DataAwsFsxOntapStorageVirtualMachineBuilder(logicalId)
    let dataAwsFsxOntapStorageVirtualMachines logicalId = DataAwsFsxOntapStorageVirtualMachinesBuilder(logicalId)
    let dataAwsFsxOpenzfsSnapshot logicalId = DataAwsFsxOpenzfsSnapshotBuilder(logicalId)
    let dataAwsFsxWindowsFileSystem logicalId = DataAwsFsxWindowsFileSystemBuilder(logicalId)
    let dataAwsGlobalacceleratorAccelerator logicalId = DataAwsGlobalacceleratorAcceleratorBuilder(logicalId)
    let dataAwsGlobalacceleratorCustomRoutingAccelerator logicalId = DataAwsGlobalacceleratorCustomRoutingAcceleratorBuilder(logicalId)
    let dataAwsGlueCatalogTable logicalId = DataAwsGlueCatalogTableBuilder(logicalId)
    let dataAwsGlueConnection logicalId = DataAwsGlueConnectionBuilder(logicalId)
    let dataAwsGlueDataCatalogEncryptionSettings logicalId = DataAwsGlueDataCatalogEncryptionSettingsBuilder(logicalId)
    let dataAwsGlueRegistry logicalId = DataAwsGlueRegistryBuilder(logicalId)
    let dataAwsGlueScript logicalId = DataAwsGlueScriptBuilder(logicalId)
    let dataAwsGrafanaWorkspace logicalId = DataAwsGrafanaWorkspaceBuilder(logicalId)
    let dataAwsGuarddutyDetector logicalId = DataAwsGuarddutyDetectorBuilder(logicalId)
    let dataAwsGuarddutyFindingIds logicalId = DataAwsGuarddutyFindingIdsBuilder(logicalId)
    let dataAwsIamAccessKeys logicalId = DataAwsIamAccessKeysBuilder(logicalId)
    let dataAwsIamAccountAlias logicalId = DataAwsIamAccountAliasBuilder(logicalId)
    let dataAwsIamGroup logicalId = DataAwsIamGroupBuilder(logicalId)
    let dataAwsIamInstanceProfile logicalId = DataAwsIamInstanceProfileBuilder(logicalId)
    let dataAwsIamInstanceProfiles logicalId = DataAwsIamInstanceProfilesBuilder(logicalId)
    let dataAwsIamOpenidConnectProvider logicalId = DataAwsIamOpenidConnectProviderBuilder(logicalId)
    let dataAwsIamPolicy logicalId = DataAwsIamPolicyBuilder(logicalId)
    let dataAwsIamPolicyDocument logicalId = DataAwsIamPolicyDocumentBuilder(logicalId)
    let dataAwsIamPrincipalPolicySimulation logicalId = DataAwsIamPrincipalPolicySimulationBuilder(logicalId)
    let dataAwsIamRole logicalId = DataAwsIamRoleBuilder(logicalId)
    let dataAwsIamRoles logicalId = DataAwsIamRolesBuilder(logicalId)
    let dataAwsIamSamlProvider logicalId = DataAwsIamSamlProviderBuilder(logicalId)
    let dataAwsIamServerCertificate logicalId = DataAwsIamServerCertificateBuilder(logicalId)
    let dataAwsIamSessionContext logicalId = DataAwsIamSessionContextBuilder(logicalId)
    let dataAwsIamUser logicalId = DataAwsIamUserBuilder(logicalId)
    let dataAwsIamUserSshKey logicalId = DataAwsIamUserSshKeyBuilder(logicalId)
    let dataAwsIamUsers logicalId = DataAwsIamUsersBuilder(logicalId)
    let dataAwsIdentitystoreGroup logicalId = DataAwsIdentitystoreGroupBuilder(logicalId)
    let dataAwsIdentitystoreGroupMemberships logicalId = DataAwsIdentitystoreGroupMembershipsBuilder(logicalId)
    let dataAwsIdentitystoreGroups logicalId = DataAwsIdentitystoreGroupsBuilder(logicalId)
    let dataAwsIdentitystoreUser logicalId = DataAwsIdentitystoreUserBuilder(logicalId)
    let dataAwsIdentitystoreUsers logicalId = DataAwsIdentitystoreUsersBuilder(logicalId)
    let dataAwsImagebuilderComponent logicalId = DataAwsImagebuilderComponentBuilder(logicalId)
    let dataAwsImagebuilderComponents logicalId = DataAwsImagebuilderComponentsBuilder(logicalId)
    let dataAwsImagebuilderContainerRecipe logicalId = DataAwsImagebuilderContainerRecipeBuilder(logicalId)
    let dataAwsImagebuilderContainerRecipes logicalId = DataAwsImagebuilderContainerRecipesBuilder(logicalId)
    let dataAwsImagebuilderDistributionConfiguration logicalId = DataAwsImagebuilderDistributionConfigurationBuilder(logicalId)
    let dataAwsImagebuilderDistributionConfigurations logicalId = DataAwsImagebuilderDistributionConfigurationsBuilder(logicalId)
    let dataAwsImagebuilderImage logicalId = DataAwsImagebuilderImageBuilder(logicalId)
    let dataAwsImagebuilderImagePipeline logicalId = DataAwsImagebuilderImagePipelineBuilder(logicalId)
    let dataAwsImagebuilderImagePipelines logicalId = DataAwsImagebuilderImagePipelinesBuilder(logicalId)
    let dataAwsImagebuilderImageRecipe logicalId = DataAwsImagebuilderImageRecipeBuilder(logicalId)
    let dataAwsImagebuilderImageRecipes logicalId = DataAwsImagebuilderImageRecipesBuilder(logicalId)
    let dataAwsImagebuilderInfrastructureConfiguration logicalId = DataAwsImagebuilderInfrastructureConfigurationBuilder(logicalId)
    let dataAwsImagebuilderInfrastructureConfigurations logicalId = DataAwsImagebuilderInfrastructureConfigurationsBuilder(logicalId)
    let dataAwsInspectorRulesPackages logicalId = DataAwsInspectorRulesPackagesBuilder(logicalId)
    let dataAwsInstance logicalId = DataAwsInstanceBuilder(logicalId)
    let dataAwsInstances logicalId = DataAwsInstancesBuilder(logicalId)
    let dataAwsInternetGateway logicalId = DataAwsInternetGatewayBuilder(logicalId)
    let dataAwsIotEndpoint logicalId = DataAwsIotEndpointBuilder(logicalId)
    let dataAwsIotRegistrationCode logicalId = DataAwsIotRegistrationCodeBuilder(logicalId)
    let dataAwsIpRanges logicalId = DataAwsIpRangesBuilder(logicalId)
    let dataAwsIvsStreamKey logicalId = DataAwsIvsStreamKeyBuilder(logicalId)
    let dataAwsKendraExperience logicalId = DataAwsKendraExperienceBuilder(logicalId)
    let dataAwsKendraFaq logicalId = DataAwsKendraFaqBuilder(logicalId)
    let dataAwsKendraIndex logicalId = DataAwsKendraIndexBuilder(logicalId)
    let dataAwsKendraQuerySuggestionsBlockList logicalId = DataAwsKendraQuerySuggestionsBlockListBuilder(logicalId)
    let dataAwsKendraThesaurus logicalId = DataAwsKendraThesaurusBuilder(logicalId)
    let dataAwsKeyPair logicalId = DataAwsKeyPairBuilder(logicalId)
    let dataAwsKinesisFirehoseDeliveryStream logicalId = DataAwsKinesisFirehoseDeliveryStreamBuilder(logicalId)
    let dataAwsKinesisStream logicalId = DataAwsKinesisStreamBuilder(logicalId)
    let dataAwsKinesisStreamConsumer logicalId = DataAwsKinesisStreamConsumerBuilder(logicalId)
    let dataAwsKmsAlias logicalId = DataAwsKmsAliasBuilder(logicalId)
    let dataAwsKmsCiphertext logicalId = DataAwsKmsCiphertextBuilder(logicalId)
    let dataAwsKmsCustomKeyStore logicalId = DataAwsKmsCustomKeyStoreBuilder(logicalId)
    let dataAwsKmsKey logicalId = DataAwsKmsKeyBuilder(logicalId)
    let dataAwsKmsPublicKey logicalId = DataAwsKmsPublicKeyBuilder(logicalId)
    let dataAwsKmsSecret logicalId = DataAwsKmsSecretBuilder(logicalId)
    let dataAwsKmsSecrets logicalId = DataAwsKmsSecretsBuilder(logicalId)
    let dataAwsLakeformationDataLakeSettings logicalId = DataAwsLakeformationDataLakeSettingsBuilder(logicalId)
    let dataAwsLakeformationPermissions logicalId = DataAwsLakeformationPermissionsBuilder(logicalId)
    let dataAwsLakeformationResource logicalId = DataAwsLakeformationResourceBuilder(logicalId)
    let dataAwsLambdaAlias logicalId = DataAwsLambdaAliasBuilder(logicalId)
    let dataAwsLambdaCodeSigningConfig logicalId = DataAwsLambdaCodeSigningConfigBuilder(logicalId)
    let dataAwsLambdaFunction logicalId = DataAwsLambdaFunctionBuilder(logicalId)
    let dataAwsLambdaFunctionUrl logicalId = DataAwsLambdaFunctionUrlBuilder(logicalId)
    let dataAwsLambdaFunctions logicalId = DataAwsLambdaFunctionsBuilder(logicalId)
    let dataAwsLambdaInvocation logicalId = DataAwsLambdaInvocationBuilder(logicalId)
    let dataAwsLambdaLayerVersion logicalId = DataAwsLambdaLayerVersionBuilder(logicalId)
    let dataAwsLaunchConfiguration logicalId = DataAwsLaunchConfigurationBuilder(logicalId)
    let dataAwsLaunchTemplate logicalId = DataAwsLaunchTemplateBuilder(logicalId)
    let dataAwsLb logicalId = DataAwsLbBuilder(logicalId)
    let dataAwsLbHostedZoneId logicalId = DataAwsLbHostedZoneIdBuilder(logicalId)
    let dataAwsLbListener logicalId = DataAwsLbListenerBuilder(logicalId)
    let dataAwsLbListenerRule logicalId = DataAwsLbListenerRuleBuilder(logicalId)
    let dataAwsLbTargetGroup logicalId = DataAwsLbTargetGroupBuilder(logicalId)
    let dataAwsLbTrustStore logicalId = DataAwsLbTrustStoreBuilder(logicalId)
    let dataAwsLbs logicalId = DataAwsLbsBuilder(logicalId)
    let dataAwsLexBot logicalId = DataAwsLexBotBuilder(logicalId)
    let dataAwsLexBotAlias logicalId = DataAwsLexBotAliasBuilder(logicalId)
    let dataAwsLexIntent logicalId = DataAwsLexIntentBuilder(logicalId)
    let dataAwsLexSlotType logicalId = DataAwsLexSlotTypeBuilder(logicalId)
    let dataAwsLicensemanagerGrants logicalId = DataAwsLicensemanagerGrantsBuilder(logicalId)
    let dataAwsLicensemanagerReceivedLicense logicalId = DataAwsLicensemanagerReceivedLicenseBuilder(logicalId)
    let dataAwsLicensemanagerReceivedLicenses logicalId = DataAwsLicensemanagerReceivedLicensesBuilder(logicalId)
    let dataAwsLocationGeofenceCollection logicalId = DataAwsLocationGeofenceCollectionBuilder(logicalId)
    let dataAwsLocationMap logicalId = DataAwsLocationMapBuilder(logicalId)
    let dataAwsLocationPlaceIndex logicalId = DataAwsLocationPlaceIndexBuilder(logicalId)
    let dataAwsLocationRouteCalculator logicalId = DataAwsLocationRouteCalculatorBuilder(logicalId)
    let dataAwsLocationTracker logicalId = DataAwsLocationTrackerBuilder(logicalId)
    let dataAwsLocationTrackerAssociation logicalId = DataAwsLocationTrackerAssociationBuilder(logicalId)
    let dataAwsLocationTrackerAssociations logicalId = DataAwsLocationTrackerAssociationsBuilder(logicalId)
    let dataAwsMediaConvertQueue logicalId = DataAwsMediaConvertQueueBuilder(logicalId)
    let dataAwsMedialiveInput logicalId = DataAwsMedialiveInputBuilder(logicalId)
    let dataAwsMemorydbAcl logicalId = DataAwsMemorydbAclBuilder(logicalId)
    let dataAwsMemorydbCluster logicalId = DataAwsMemorydbClusterBuilder(logicalId)
    let dataAwsMemorydbParameterGroup logicalId = DataAwsMemorydbParameterGroupBuilder(logicalId)
    let dataAwsMemorydbSnapshot logicalId = DataAwsMemorydbSnapshotBuilder(logicalId)
    let dataAwsMemorydbSubnetGroup logicalId = DataAwsMemorydbSubnetGroupBuilder(logicalId)
    let dataAwsMemorydbUser logicalId = DataAwsMemorydbUserBuilder(logicalId)
    let dataAwsMqBroker logicalId = DataAwsMqBrokerBuilder(logicalId)
    let dataAwsMqBrokerEngineTypes logicalId = DataAwsMqBrokerEngineTypesBuilder(logicalId)
    let dataAwsMqBrokerInstanceTypeOfferings logicalId = DataAwsMqBrokerInstanceTypeOfferingsBuilder(logicalId)
    let dataAwsMskBootstrapBrokers logicalId = DataAwsMskBootstrapBrokersBuilder(logicalId)
    let dataAwsMskBrokerNodes logicalId = DataAwsMskBrokerNodesBuilder(logicalId)
    let dataAwsMskCluster logicalId = DataAwsMskClusterBuilder(logicalId)
    let dataAwsMskConfiguration logicalId = DataAwsMskConfigurationBuilder(logicalId)
    let dataAwsMskKafkaVersion logicalId = DataAwsMskKafkaVersionBuilder(logicalId)
    let dataAwsMskVpcConnection logicalId = DataAwsMskVpcConnectionBuilder(logicalId)
    let dataAwsMskconnectConnector logicalId = DataAwsMskconnectConnectorBuilder(logicalId)
    let dataAwsMskconnectCustomPlugin logicalId = DataAwsMskconnectCustomPluginBuilder(logicalId)
    let dataAwsMskconnectWorkerConfiguration logicalId = DataAwsMskconnectWorkerConfigurationBuilder(logicalId)
    let dataAwsNatGateway logicalId = DataAwsNatGatewayBuilder(logicalId)
    let dataAwsNatGateways logicalId = DataAwsNatGatewaysBuilder(logicalId)
    let dataAwsNeptuneEngineVersion logicalId = DataAwsNeptuneEngineVersionBuilder(logicalId)
    let dataAwsNeptuneOrderableDbInstance logicalId = DataAwsNeptuneOrderableDbInstanceBuilder(logicalId)
    let dataAwsNetworkAcls logicalId = DataAwsNetworkAclsBuilder(logicalId)
    let dataAwsNetworkInterface logicalId = DataAwsNetworkInterfaceBuilder(logicalId)
    let dataAwsNetworkInterfaces logicalId = DataAwsNetworkInterfacesBuilder(logicalId)
    let dataAwsNetworkfirewallFirewall logicalId = DataAwsNetworkfirewallFirewallBuilder(logicalId)
    let dataAwsNetworkfirewallFirewallPolicy logicalId = DataAwsNetworkfirewallFirewallPolicyBuilder(logicalId)
    let dataAwsNetworkfirewallResourcePolicy logicalId = DataAwsNetworkfirewallResourcePolicyBuilder(logicalId)
    let dataAwsNetworkmanagerConnection logicalId = DataAwsNetworkmanagerConnectionBuilder(logicalId)
    let dataAwsNetworkmanagerConnections logicalId = DataAwsNetworkmanagerConnectionsBuilder(logicalId)
    let dataAwsNetworkmanagerCoreNetworkPolicyDocument logicalId = DataAwsNetworkmanagerCoreNetworkPolicyDocumentBuilder(logicalId)
    let dataAwsNetworkmanagerDevice logicalId = DataAwsNetworkmanagerDeviceBuilder(logicalId)
    let dataAwsNetworkmanagerDevices logicalId = DataAwsNetworkmanagerDevicesBuilder(logicalId)
    let dataAwsNetworkmanagerGlobalNetwork logicalId = DataAwsNetworkmanagerGlobalNetworkBuilder(logicalId)
    let dataAwsNetworkmanagerGlobalNetworks logicalId = DataAwsNetworkmanagerGlobalNetworksBuilder(logicalId)
    let dataAwsNetworkmanagerLink logicalId = DataAwsNetworkmanagerLinkBuilder(logicalId)
    let dataAwsNetworkmanagerLinks logicalId = DataAwsNetworkmanagerLinksBuilder(logicalId)
    let dataAwsNetworkmanagerSite logicalId = DataAwsNetworkmanagerSiteBuilder(logicalId)
    let dataAwsNetworkmanagerSites logicalId = DataAwsNetworkmanagerSitesBuilder(logicalId)
    let dataAwsOamLink logicalId = DataAwsOamLinkBuilder(logicalId)
    let dataAwsOamLinks logicalId = DataAwsOamLinksBuilder(logicalId)
    let dataAwsOamSink logicalId = DataAwsOamSinkBuilder(logicalId)
    let dataAwsOamSinks logicalId = DataAwsOamSinksBuilder(logicalId)
    let dataAwsOpensearchDomain logicalId = DataAwsOpensearchDomainBuilder(logicalId)
    let dataAwsOpensearchserverlessAccessPolicy logicalId = DataAwsOpensearchserverlessAccessPolicyBuilder(logicalId)
    let dataAwsOpensearchserverlessCollection logicalId = DataAwsOpensearchserverlessCollectionBuilder(logicalId)
    let dataAwsOpensearchserverlessLifecyclePolicy logicalId = DataAwsOpensearchserverlessLifecyclePolicyBuilder(logicalId)
    let dataAwsOpensearchserverlessSecurityConfig logicalId = DataAwsOpensearchserverlessSecurityConfigBuilder(logicalId)
    let dataAwsOpensearchserverlessSecurityPolicy logicalId = DataAwsOpensearchserverlessSecurityPolicyBuilder(logicalId)
    let dataAwsOpensearchserverlessVpcEndpoint logicalId = DataAwsOpensearchserverlessVpcEndpointBuilder(logicalId)
    let dataAwsOrganizationsDelegatedAdministrators logicalId = DataAwsOrganizationsDelegatedAdministratorsBuilder(logicalId)
    let dataAwsOrganizationsDelegatedServices logicalId = DataAwsOrganizationsDelegatedServicesBuilder(logicalId)
    let dataAwsOrganizationsOrganization logicalId = DataAwsOrganizationsOrganizationBuilder(logicalId)
    let dataAwsOrganizationsOrganizationalUnit logicalId = DataAwsOrganizationsOrganizationalUnitBuilder(logicalId)
    let dataAwsOrganizationsOrganizationalUnitChildAccounts logicalId = DataAwsOrganizationsOrganizationalUnitChildAccountsBuilder(logicalId)
    let dataAwsOrganizationsOrganizationalUnitDescendantAccounts logicalId = DataAwsOrganizationsOrganizationalUnitDescendantAccountsBuilder(logicalId)
    let dataAwsOrganizationsOrganizationalUnitDescendantOrganizationalUnits logicalId = DataAwsOrganizationsOrganizationalUnitDescendantOrganizationalUnitsBuilder(logicalId)
    let dataAwsOrganizationsOrganizationalUnits logicalId = DataAwsOrganizationsOrganizationalUnitsBuilder(logicalId)
    let dataAwsOrganizationsPolicies logicalId = DataAwsOrganizationsPoliciesBuilder(logicalId)
    let dataAwsOrganizationsPoliciesForTarget logicalId = DataAwsOrganizationsPoliciesForTargetBuilder(logicalId)
    let dataAwsOrganizationsPolicy logicalId = DataAwsOrganizationsPolicyBuilder(logicalId)
    let dataAwsOrganizationsResourceTags logicalId = DataAwsOrganizationsResourceTagsBuilder(logicalId)
    let dataAwsOutpostsAsset logicalId = DataAwsOutpostsAssetBuilder(logicalId)
    let dataAwsOutpostsAssets logicalId = DataAwsOutpostsAssetsBuilder(logicalId)
    let dataAwsOutpostsOutpost logicalId = DataAwsOutpostsOutpostBuilder(logicalId)
    let dataAwsOutpostsOutpostInstanceType logicalId = DataAwsOutpostsOutpostInstanceTypeBuilder(logicalId)
    let dataAwsOutpostsOutpostInstanceTypes logicalId = DataAwsOutpostsOutpostInstanceTypesBuilder(logicalId)
    let dataAwsOutpostsOutposts logicalId = DataAwsOutpostsOutpostsBuilder(logicalId)
    let dataAwsOutpostsSite logicalId = DataAwsOutpostsSiteBuilder(logicalId)
    let dataAwsOutpostsSites logicalId = DataAwsOutpostsSitesBuilder(logicalId)
    let dataAwsPartition logicalId = DataAwsPartitionBuilder(logicalId)
    let dataAwsPollyVoices logicalId = DataAwsPollyVoicesBuilder(logicalId)
    let dataAwsPrefixList logicalId = DataAwsPrefixListBuilder(logicalId)
    let dataAwsPricingProduct logicalId = DataAwsPricingProductBuilder(logicalId)
    let dataAwsPrometheusDefaultScraperConfiguration logicalId = DataAwsPrometheusDefaultScraperConfigurationBuilder(logicalId)
    let dataAwsPrometheusWorkspace logicalId = DataAwsPrometheusWorkspaceBuilder(logicalId)
    let dataAwsPrometheusWorkspaces logicalId = DataAwsPrometheusWorkspacesBuilder(logicalId)
    let dataAwsQldbLedger logicalId = DataAwsQldbLedgerBuilder(logicalId)
    let dataAwsQuicksightAnalysis logicalId = DataAwsQuicksightAnalysisBuilder(logicalId)
    let dataAwsQuicksightDataSet logicalId = DataAwsQuicksightDataSetBuilder(logicalId)
    let dataAwsQuicksightGroup logicalId = DataAwsQuicksightGroupBuilder(logicalId)
    let dataAwsQuicksightTheme logicalId = DataAwsQuicksightThemeBuilder(logicalId)
    let dataAwsQuicksightUser logicalId = DataAwsQuicksightUserBuilder(logicalId)
    let dataAwsRamResourceShare logicalId = DataAwsRamResourceShareBuilder(logicalId)
    let dataAwsRdsCertificate logicalId = DataAwsRdsCertificateBuilder(logicalId)
    let dataAwsRdsCluster logicalId = DataAwsRdsClusterBuilder(logicalId)
    let dataAwsRdsClusterParameterGroup logicalId = DataAwsRdsClusterParameterGroupBuilder(logicalId)
    let dataAwsRdsClusters logicalId = DataAwsRdsClustersBuilder(logicalId)
    let dataAwsRdsEngineVersion logicalId = DataAwsRdsEngineVersionBuilder(logicalId)
    let dataAwsRdsOrderableDbInstance logicalId = DataAwsRdsOrderableDbInstanceBuilder(logicalId)
    let dataAwsRdsReservedInstanceOffering logicalId = DataAwsRdsReservedInstanceOfferingBuilder(logicalId)
    let dataAwsRedshiftCluster logicalId = DataAwsRedshiftClusterBuilder(logicalId)
    let dataAwsRedshiftClusterCredentials logicalId = DataAwsRedshiftClusterCredentialsBuilder(logicalId)
    let dataAwsRedshiftDataShares logicalId = DataAwsRedshiftDataSharesBuilder(logicalId)
    let dataAwsRedshiftOrderableCluster logicalId = DataAwsRedshiftOrderableClusterBuilder(logicalId)
    let dataAwsRedshiftProducerDataShares logicalId = DataAwsRedshiftProducerDataSharesBuilder(logicalId)
    let dataAwsRedshiftServiceAccount logicalId = DataAwsRedshiftServiceAccountBuilder(logicalId)
    let dataAwsRedshiftSubnetGroup logicalId = DataAwsRedshiftSubnetGroupBuilder(logicalId)
    let dataAwsRedshiftserverlessCredentials logicalId = DataAwsRedshiftserverlessCredentialsBuilder(logicalId)
    let dataAwsRedshiftserverlessNamespace logicalId = DataAwsRedshiftserverlessNamespaceBuilder(logicalId)
    let dataAwsRedshiftserverlessWorkgroup logicalId = DataAwsRedshiftserverlessWorkgroupBuilder(logicalId)
    let dataAwsRegion logicalId = DataAwsRegionBuilder(logicalId)
    let dataAwsRegions logicalId = DataAwsRegionsBuilder(logicalId)
    let dataAwsResourceexplorer2Search logicalId = DataAwsResourceexplorer2SearchBuilder(logicalId)
    let dataAwsResourcegroupstaggingapiResources logicalId = DataAwsResourcegroupstaggingapiResourcesBuilder(logicalId)
    let dataAwsRoute logicalId = DataAwsRouteBuilder(logicalId)
    let dataAwsRoute53DelegationSet logicalId = DataAwsRoute53DelegationSetBuilder(logicalId)
    let dataAwsRoute53ProfilesProfiles logicalId = DataAwsRoute53ProfilesProfilesBuilder(logicalId)
    let dataAwsRoute53Records logicalId = DataAwsRoute53RecordsBuilder(logicalId)
    let dataAwsRoute53ResolverEndpoint logicalId = DataAwsRoute53ResolverEndpointBuilder(logicalId)
    let dataAwsRoute53ResolverFirewallConfig logicalId = DataAwsRoute53ResolverFirewallConfigBuilder(logicalId)
    let dataAwsRoute53ResolverFirewallDomainList logicalId = DataAwsRoute53ResolverFirewallDomainListBuilder(logicalId)
    let dataAwsRoute53ResolverFirewallRuleGroup logicalId = DataAwsRoute53ResolverFirewallRuleGroupBuilder(logicalId)
    let dataAwsRoute53ResolverFirewallRuleGroupAssociation logicalId = DataAwsRoute53ResolverFirewallRuleGroupAssociationBuilder(logicalId)
    let dataAwsRoute53ResolverFirewallRules logicalId = DataAwsRoute53ResolverFirewallRulesBuilder(logicalId)
    let dataAwsRoute53ResolverQueryLogConfig logicalId = DataAwsRoute53ResolverQueryLogConfigBuilder(logicalId)
    let dataAwsRoute53ResolverRule logicalId = DataAwsRoute53ResolverRuleBuilder(logicalId)
    let dataAwsRoute53ResolverRules logicalId = DataAwsRoute53ResolverRulesBuilder(logicalId)
    let dataAwsRoute53TrafficPolicyDocument logicalId = DataAwsRoute53TrafficPolicyDocumentBuilder(logicalId)
    let dataAwsRoute53Zone logicalId = DataAwsRoute53ZoneBuilder(logicalId)
    let dataAwsRoute53Zones logicalId = DataAwsRoute53ZonesBuilder(logicalId)
    let dataAwsRouteTable logicalId = DataAwsRouteTableBuilder(logicalId)
    let dataAwsRouteTables logicalId = DataAwsRouteTablesBuilder(logicalId)
    let dataAwsS3AccountPublicAccessBlock logicalId = DataAwsS3AccountPublicAccessBlockBuilder(logicalId)
    let dataAwsS3Bucket logicalId = DataAwsS3BucketBuilder(logicalId)
    let dataAwsS3BucketObject logicalId = DataAwsS3BucketObjectBuilder(logicalId)
    let dataAwsS3BucketObjects logicalId = DataAwsS3BucketObjectsBuilder(logicalId)
    let dataAwsS3BucketPolicy logicalId = DataAwsS3BucketPolicyBuilder(logicalId)
    let dataAwsS3ControlMultiRegionAccessPoint logicalId = DataAwsS3ControlMultiRegionAccessPointBuilder(logicalId)
    let dataAwsS3DirectoryBuckets logicalId = DataAwsS3DirectoryBucketsBuilder(logicalId)
    let dataAwsS3Object logicalId = DataAwsS3ObjectBuilder(logicalId)
    let dataAwsS3Objects logicalId = DataAwsS3ObjectsBuilder(logicalId)
    let dataAwsSagemakerPrebuiltEcrImage logicalId = DataAwsSagemakerPrebuiltEcrImageBuilder(logicalId)
    let dataAwsSecretsmanagerRandomPassword logicalId = DataAwsSecretsmanagerRandomPasswordBuilder(logicalId)
    let dataAwsSecretsmanagerSecret logicalId = DataAwsSecretsmanagerSecretBuilder(logicalId)
    let dataAwsSecretsmanagerSecretRotation logicalId = DataAwsSecretsmanagerSecretRotationBuilder(logicalId)
    let dataAwsSecretsmanagerSecretVersion logicalId = DataAwsSecretsmanagerSecretVersionBuilder(logicalId)
    let dataAwsSecretsmanagerSecretVersions logicalId = DataAwsSecretsmanagerSecretVersionsBuilder(logicalId)
    let dataAwsSecretsmanagerSecrets logicalId = DataAwsSecretsmanagerSecretsBuilder(logicalId)
    let dataAwsSecurityGroup logicalId = DataAwsSecurityGroupBuilder(logicalId)
    let dataAwsSecurityGroups logicalId = DataAwsSecurityGroupsBuilder(logicalId)
    let dataAwsSecurityhubStandardsControlAssociations logicalId = DataAwsSecurityhubStandardsControlAssociationsBuilder(logicalId)
    let dataAwsServerlessapplicationrepositoryApplication logicalId = DataAwsServerlessapplicationrepositoryApplicationBuilder(logicalId)
    let dataAwsService logicalId = DataAwsServiceBuilder(logicalId)
    let dataAwsServiceDiscoveryDnsNamespace logicalId = DataAwsServiceDiscoveryDnsNamespaceBuilder(logicalId)
    let dataAwsServiceDiscoveryHttpNamespace logicalId = DataAwsServiceDiscoveryHttpNamespaceBuilder(logicalId)
    let dataAwsServiceDiscoveryService logicalId = DataAwsServiceDiscoveryServiceBuilder(logicalId)
    let dataAwsServicePrincipal logicalId = DataAwsServicePrincipalBuilder(logicalId)
    let dataAwsServicecatalogConstraint logicalId = DataAwsServicecatalogConstraintBuilder(logicalId)
    let dataAwsServicecatalogLaunchPaths logicalId = DataAwsServicecatalogLaunchPathsBuilder(logicalId)
    let dataAwsServicecatalogPortfolio logicalId = DataAwsServicecatalogPortfolioBuilder(logicalId)
    let dataAwsServicecatalogPortfolioConstraints logicalId = DataAwsServicecatalogPortfolioConstraintsBuilder(logicalId)
    let dataAwsServicecatalogProduct logicalId = DataAwsServicecatalogProductBuilder(logicalId)
    let dataAwsServicecatalogProvisioningArtifacts logicalId = DataAwsServicecatalogProvisioningArtifactsBuilder(logicalId)
    let dataAwsServicecatalogappregistryApplication logicalId = DataAwsServicecatalogappregistryApplicationBuilder(logicalId)
    let dataAwsServicecatalogappregistryAttributeGroup logicalId = DataAwsServicecatalogappregistryAttributeGroupBuilder(logicalId)
    let dataAwsServicecatalogappregistryAttributeGroupAssociations logicalId = DataAwsServicecatalogappregistryAttributeGroupAssociationsBuilder(logicalId)
    let dataAwsServicequotasService logicalId = DataAwsServicequotasServiceBuilder(logicalId)
    let dataAwsServicequotasServiceQuota logicalId = DataAwsServicequotasServiceQuotaBuilder(logicalId)
    let dataAwsServicequotasTemplates logicalId = DataAwsServicequotasTemplatesBuilder(logicalId)
    let dataAwsSesActiveReceiptRuleSet logicalId = DataAwsSesActiveReceiptRuleSetBuilder(logicalId)
    let dataAwsSesDomainIdentity logicalId = DataAwsSesDomainIdentityBuilder(logicalId)
    let dataAwsSesEmailIdentity logicalId = DataAwsSesEmailIdentityBuilder(logicalId)
    let dataAwsSesv2ConfigurationSet logicalId = DataAwsSesv2ConfigurationSetBuilder(logicalId)
    let dataAwsSesv2DedicatedIpPool logicalId = DataAwsSesv2DedicatedIpPoolBuilder(logicalId)
    let dataAwsSesv2EmailIdentity logicalId = DataAwsSesv2EmailIdentityBuilder(logicalId)
    let dataAwsSesv2EmailIdentityMailFromAttributes logicalId = DataAwsSesv2EmailIdentityMailFromAttributesBuilder(logicalId)
    let dataAwsSfnActivity logicalId = DataAwsSfnActivityBuilder(logicalId)
    let dataAwsSfnAlias logicalId = DataAwsSfnAliasBuilder(logicalId)
    let dataAwsSfnStateMachine logicalId = DataAwsSfnStateMachineBuilder(logicalId)
    let dataAwsSfnStateMachineVersions logicalId = DataAwsSfnStateMachineVersionsBuilder(logicalId)
    let dataAwsShieldProtection logicalId = DataAwsShieldProtectionBuilder(logicalId)
    let dataAwsSignerSigningJob logicalId = DataAwsSignerSigningJobBuilder(logicalId)
    let dataAwsSignerSigningProfile logicalId = DataAwsSignerSigningProfileBuilder(logicalId)
    let dataAwsSnsTopic logicalId = DataAwsSnsTopicBuilder(logicalId)
    let dataAwsSpotDatafeedSubscription logicalId = DataAwsSpotDatafeedSubscriptionBuilder(logicalId)
    let dataAwsSqsQueue logicalId = DataAwsSqsQueueBuilder(logicalId)
    let dataAwsSqsQueues logicalId = DataAwsSqsQueuesBuilder(logicalId)
    let dataAwsSsmDocument logicalId = DataAwsSsmDocumentBuilder(logicalId)
    let dataAwsSsmInstances logicalId = DataAwsSsmInstancesBuilder(logicalId)
    let dataAwsSsmMaintenanceWindows logicalId = DataAwsSsmMaintenanceWindowsBuilder(logicalId)
    let dataAwsSsmParameter logicalId = DataAwsSsmParameterBuilder(logicalId)
    let dataAwsSsmParametersByPath logicalId = DataAwsSsmParametersByPathBuilder(logicalId)
    let dataAwsSsmPatchBaseline logicalId = DataAwsSsmPatchBaselineBuilder(logicalId)
    let dataAwsSsmPatchBaselines logicalId = DataAwsSsmPatchBaselinesBuilder(logicalId)
    let dataAwsSsmcontactsContact logicalId = DataAwsSsmcontactsContactBuilder(logicalId)
    let dataAwsSsmcontactsContactChannel logicalId = DataAwsSsmcontactsContactChannelBuilder(logicalId)
    let dataAwsSsmcontactsPlan logicalId = DataAwsSsmcontactsPlanBuilder(logicalId)
    let dataAwsSsmcontactsRotation logicalId = DataAwsSsmcontactsRotationBuilder(logicalId)
    let dataAwsSsmincidentsReplicationSet logicalId = DataAwsSsmincidentsReplicationSetBuilder(logicalId)
    let dataAwsSsmincidentsResponsePlan logicalId = DataAwsSsmincidentsResponsePlanBuilder(logicalId)
    let dataAwsSsoadminApplication logicalId = DataAwsSsoadminApplicationBuilder(logicalId)
    let dataAwsSsoadminApplicationAssignments logicalId = DataAwsSsoadminApplicationAssignmentsBuilder(logicalId)
    let dataAwsSsoadminApplicationProviders logicalId = DataAwsSsoadminApplicationProvidersBuilder(logicalId)
    let dataAwsSsoadminInstances logicalId = DataAwsSsoadminInstancesBuilder(logicalId)
    let dataAwsSsoadminPermissionSet logicalId = DataAwsSsoadminPermissionSetBuilder(logicalId)
    let dataAwsSsoadminPermissionSets logicalId = DataAwsSsoadminPermissionSetsBuilder(logicalId)
    let dataAwsSsoadminPrincipalApplicationAssignments logicalId = DataAwsSsoadminPrincipalApplicationAssignmentsBuilder(logicalId)
    let dataAwsStoragegatewayLocalDisk logicalId = DataAwsStoragegatewayLocalDiskBuilder(logicalId)
    let dataAwsSubnet logicalId = DataAwsSubnetBuilder(logicalId)
    let dataAwsSubnets logicalId = DataAwsSubnetsBuilder(logicalId)
    let dataAwsSyntheticsRuntimeVersion logicalId = DataAwsSyntheticsRuntimeVersionBuilder(logicalId)
    let dataAwsSyntheticsRuntimeVersions logicalId = DataAwsSyntheticsRuntimeVersionsBuilder(logicalId)
    let dataAwsTimestreamwriteDatabase logicalId = DataAwsTimestreamwriteDatabaseBuilder(logicalId)
    let dataAwsTimestreamwriteTable logicalId = DataAwsTimestreamwriteTableBuilder(logicalId)
    let dataAwsTransferConnector logicalId = DataAwsTransferConnectorBuilder(logicalId)
    let dataAwsTransferServer logicalId = DataAwsTransferServerBuilder(logicalId)
    let dataAwsVerifiedpermissionsPolicyStore logicalId = DataAwsVerifiedpermissionsPolicyStoreBuilder(logicalId)
    let dataAwsVpc logicalId = DataAwsVpcBuilder(logicalId)
    let dataAwsVpcDhcpOptions logicalId = DataAwsVpcDhcpOptionsBuilder(logicalId)
    let dataAwsVpcEndpoint logicalId = DataAwsVpcEndpointBuilder(logicalId)
    let dataAwsVpcEndpointAssociations logicalId = DataAwsVpcEndpointAssociationsBuilder(logicalId)
    let dataAwsVpcEndpointService logicalId = DataAwsVpcEndpointServiceBuilder(logicalId)
    let dataAwsVpcIpam logicalId = DataAwsVpcIpamBuilder(logicalId)
    let dataAwsVpcIpamPool logicalId = DataAwsVpcIpamPoolBuilder(logicalId)
    let dataAwsVpcIpamPoolCidrs logicalId = DataAwsVpcIpamPoolCidrsBuilder(logicalId)
    let dataAwsVpcIpamPools logicalId = DataAwsVpcIpamPoolsBuilder(logicalId)
    let dataAwsVpcIpamPreviewNextCidr logicalId = DataAwsVpcIpamPreviewNextCidrBuilder(logicalId)
    let dataAwsVpcIpams logicalId = DataAwsVpcIpamsBuilder(logicalId)
    let dataAwsVpcPeeringConnection logicalId = DataAwsVpcPeeringConnectionBuilder(logicalId)
    let dataAwsVpcPeeringConnections logicalId = DataAwsVpcPeeringConnectionsBuilder(logicalId)
    let dataAwsVpcSecurityGroupRule logicalId = DataAwsVpcSecurityGroupRuleBuilder(logicalId)
    let dataAwsVpcSecurityGroupRules logicalId = DataAwsVpcSecurityGroupRulesBuilder(logicalId)
    let dataAwsVpclatticeAuthPolicy logicalId = DataAwsVpclatticeAuthPolicyBuilder(logicalId)
    let dataAwsVpclatticeListener logicalId = DataAwsVpclatticeListenerBuilder(logicalId)
    let dataAwsVpclatticeResourcePolicy logicalId = DataAwsVpclatticeResourcePolicyBuilder(logicalId)
    let dataAwsVpclatticeService logicalId = DataAwsVpclatticeServiceBuilder(logicalId)
    let dataAwsVpclatticeServiceNetwork logicalId = DataAwsVpclatticeServiceNetworkBuilder(logicalId)
    let dataAwsVpcs logicalId = DataAwsVpcsBuilder(logicalId)
    let dataAwsVpnGateway logicalId = DataAwsVpnGatewayBuilder(logicalId)
    let dataAwsWafIpset logicalId = DataAwsWafIpsetBuilder(logicalId)
    let dataAwsWafRateBasedRule logicalId = DataAwsWafRateBasedRuleBuilder(logicalId)
    let dataAwsWafRule logicalId = DataAwsWafRuleBuilder(logicalId)
    let dataAwsWafSubscribedRuleGroup logicalId = DataAwsWafSubscribedRuleGroupBuilder(logicalId)
    let dataAwsWafWebAcl logicalId = DataAwsWafWebAclBuilder(logicalId)
    let dataAwsWafregionalIpset logicalId = DataAwsWafregionalIpsetBuilder(logicalId)
    let dataAwsWafregionalRateBasedRule logicalId = DataAwsWafregionalRateBasedRuleBuilder(logicalId)
    let dataAwsWafregionalRule logicalId = DataAwsWafregionalRuleBuilder(logicalId)
    let dataAwsWafregionalSubscribedRuleGroup logicalId = DataAwsWafregionalSubscribedRuleGroupBuilder(logicalId)
    let dataAwsWafregionalWebAcl logicalId = DataAwsWafregionalWebAclBuilder(logicalId)
    let dataAwsWafv2IpSet logicalId = DataAwsWafv2IpSetBuilder(logicalId)
    let dataAwsWafv2RegexPatternSet logicalId = DataAwsWafv2RegexPatternSetBuilder(logicalId)
    let dataAwsWafv2RuleGroup logicalId = DataAwsWafv2RuleGroupBuilder(logicalId)
    let dataAwsWafv2WebAcl logicalId = DataAwsWafv2WebAclBuilder(logicalId)
    let dataAwsWorkspacesBundle logicalId = DataAwsWorkspacesBundleBuilder(logicalId)
    let dataAwsWorkspacesDirectory logicalId = DataAwsWorkspacesDirectoryBuilder(logicalId)
    let dataAwsWorkspacesImage logicalId = DataAwsWorkspacesImageBuilder(logicalId)
    let dataAwsWorkspacesWorkspace logicalId = DataAwsWorkspacesWorkspaceBuilder(logicalId)
    let dataexchangeDataSet logicalId = DataexchangeDataSetBuilder(logicalId)
    let dataexchangeEventAction logicalId = DataexchangeEventActionBuilder(logicalId)
    let dataexchangeRevision logicalId = DataexchangeRevisionBuilder(logicalId)
    let dataexchangeRevisionAssets logicalId = DataexchangeRevisionAssetsBuilder(logicalId)
    let datapipelinePipeline logicalId = DatapipelinePipelineBuilder(logicalId)
    let datapipelinePipelineDefinition logicalId = DatapipelinePipelineDefinitionBuilder(logicalId)
    let datasyncAgent logicalId = DatasyncAgentBuilder(logicalId)
    let datasyncLocationAzureBlob logicalId = DatasyncLocationAzureBlobBuilder(logicalId)
    let datasyncLocationEfs logicalId = DatasyncLocationEfsBuilder(logicalId)
    let datasyncLocationFsxLustreFileSystem logicalId = DatasyncLocationFsxLustreFileSystemBuilder(logicalId)
    let datasyncLocationFsxOntapFileSystem logicalId = DatasyncLocationFsxOntapFileSystemBuilder(logicalId)
    let datasyncLocationFsxOpenzfsFileSystem logicalId = DatasyncLocationFsxOpenzfsFileSystemBuilder(logicalId)
    let datasyncLocationFsxWindowsFileSystem logicalId = DatasyncLocationFsxWindowsFileSystemBuilder(logicalId)
    let datasyncLocationHdfs logicalId = DatasyncLocationHdfsBuilder(logicalId)
    let datasyncLocationNfs logicalId = DatasyncLocationNfsBuilder(logicalId)
    let datasyncLocationObjectStorage logicalId = DatasyncLocationObjectStorageBuilder(logicalId)
    let datasyncLocationS3 logicalId = DatasyncLocationS3Builder(logicalId)
    let datasyncLocationSmb logicalId = DatasyncLocationSmbBuilder(logicalId)
    let datasyncTask logicalId = DatasyncTaskBuilder(logicalId)
    let datazoneAssetType logicalId = DatazoneAssetTypeBuilder(logicalId)
    let datazoneDomain logicalId = DatazoneDomainBuilder(logicalId)
    let datazoneEnvironment logicalId = DatazoneEnvironmentBuilder(logicalId)
    let datazoneEnvironmentBlueprintConfiguration logicalId = DatazoneEnvironmentBlueprintConfigurationBuilder(logicalId)
    let datazoneEnvironmentProfile logicalId = DatazoneEnvironmentProfileBuilder(logicalId)
    let datazoneFormType logicalId = DatazoneFormTypeBuilder(logicalId)
    let datazoneGlossary logicalId = DatazoneGlossaryBuilder(logicalId)
    let datazoneGlossaryTerm logicalId = DatazoneGlossaryTermBuilder(logicalId)
    let datazoneProject logicalId = DatazoneProjectBuilder(logicalId)
    let datazoneUserProfile logicalId = DatazoneUserProfileBuilder(logicalId)
    let daxCluster logicalId = DaxClusterBuilder(logicalId)
    let daxParameterGroup logicalId = DaxParameterGroupBuilder(logicalId)
    let daxSubnetGroup logicalId = DaxSubnetGroupBuilder(logicalId)
    let dbClusterSnapshot logicalId = DbClusterSnapshotBuilder(logicalId)
    let dbEventSubscription logicalId = DbEventSubscriptionBuilder(logicalId)
    let dbInstance logicalId = DbInstanceBuilder(logicalId)
    let dbInstanceAutomatedBackupsReplication logicalId = DbInstanceAutomatedBackupsReplicationBuilder(logicalId)
    let dbInstanceRoleAssociation logicalId = DbInstanceRoleAssociationBuilder(logicalId)
    let dbOptionGroup logicalId = DbOptionGroupBuilder(logicalId)
    let dbParameterGroup logicalId = DbParameterGroupBuilder(logicalId)
    let dbProxy logicalId = DbProxyBuilder(logicalId)
    let dbProxyDefaultTargetGroup logicalId = DbProxyDefaultTargetGroupBuilder(logicalId)
    let dbProxyEndpoint logicalId = DbProxyEndpointBuilder(logicalId)
    let dbProxyTarget logicalId = DbProxyTargetBuilder(logicalId)
    let dbSnapshot logicalId = DbSnapshotBuilder(logicalId)
    let dbSnapshotCopy logicalId = DbSnapshotCopyBuilder(logicalId)
    let dbSubnetGroup logicalId = DbSubnetGroupBuilder(logicalId)
    let defaultNetworkAcl logicalId = DefaultNetworkAclBuilder(logicalId)
    let defaultRouteTable logicalId = DefaultRouteTableBuilder(logicalId)
    let defaultSecurityGroup logicalId = DefaultSecurityGroupBuilder(logicalId)
    let defaultSubnet logicalId = DefaultSubnetBuilder(logicalId)
    let defaultVpc logicalId = DefaultVpcBuilder(logicalId)
    let defaultVpcDhcpOptions logicalId = DefaultVpcDhcpOptionsBuilder(logicalId)
    let detectiveGraph logicalId = DetectiveGraphBuilder(logicalId)
    let detectiveInvitationAccepter logicalId = DetectiveInvitationAccepterBuilder(logicalId)
    let detectiveMember logicalId = DetectiveMemberBuilder(logicalId)
    let detectiveOrganizationAdminAccount logicalId = DetectiveOrganizationAdminAccountBuilder(logicalId)
    let detectiveOrganizationConfiguration logicalId = DetectiveOrganizationConfigurationBuilder(logicalId)
    let devicefarmDevicePool logicalId = DevicefarmDevicePoolBuilder(logicalId)
    let devicefarmInstanceProfile logicalId = DevicefarmInstanceProfileBuilder(logicalId)
    let devicefarmNetworkProfile logicalId = DevicefarmNetworkProfileBuilder(logicalId)
    let devicefarmProject logicalId = DevicefarmProjectBuilder(logicalId)
    let devicefarmTestGridProject logicalId = DevicefarmTestGridProjectBuilder(logicalId)
    let devicefarmUpload logicalId = DevicefarmUploadBuilder(logicalId)
    let devopsguruEventSourcesConfig logicalId = DevopsguruEventSourcesConfigBuilder(logicalId)
    let devopsguruNotificationChannel logicalId = DevopsguruNotificationChannelBuilder(logicalId)
    let devopsguruResourceCollection logicalId = DevopsguruResourceCollectionBuilder(logicalId)
    let devopsguruServiceIntegration logicalId = DevopsguruServiceIntegrationBuilder(logicalId)
    let directoryServiceConditionalForwarder logicalId = DirectoryServiceConditionalForwarderBuilder(logicalId)
    let directoryServiceDirectory logicalId = DirectoryServiceDirectoryBuilder(logicalId)
    let directoryServiceLogSubscription logicalId = DirectoryServiceLogSubscriptionBuilder(logicalId)
    let directoryServiceRadiusSettings logicalId = DirectoryServiceRadiusSettingsBuilder(logicalId)
    let directoryServiceRegion logicalId = DirectoryServiceRegionBuilder(logicalId)
    let directoryServiceSharedDirectory logicalId = DirectoryServiceSharedDirectoryBuilder(logicalId)
    let directoryServiceSharedDirectoryAccepter logicalId = DirectoryServiceSharedDirectoryAccepterBuilder(logicalId)
    let directoryServiceTrust logicalId = DirectoryServiceTrustBuilder(logicalId)
    let dlmLifecyclePolicy logicalId = DlmLifecyclePolicyBuilder(logicalId)
    let dmsCertificate logicalId = DmsCertificateBuilder(logicalId)
    let dmsEndpoint logicalId = DmsEndpointBuilder(logicalId)
    let dmsEventSubscription logicalId = DmsEventSubscriptionBuilder(logicalId)
    let dmsReplicationConfig logicalId = DmsReplicationConfigBuilder(logicalId)
    let dmsReplicationInstance logicalId = DmsReplicationInstanceBuilder(logicalId)
    let dmsReplicationSubnetGroup logicalId = DmsReplicationSubnetGroupBuilder(logicalId)
    let dmsReplicationTask logicalId = DmsReplicationTaskBuilder(logicalId)
    let dmsS3Endpoint logicalId = DmsS3EndpointBuilder(logicalId)
    let docdbCluster logicalId = DocdbClusterBuilder(logicalId)
    let docdbClusterInstance logicalId = DocdbClusterInstanceBuilder(logicalId)
    let docdbClusterParameterGroup logicalId = DocdbClusterParameterGroupBuilder(logicalId)
    let docdbClusterSnapshot logicalId = DocdbClusterSnapshotBuilder(logicalId)
    let docdbEventSubscription logicalId = DocdbEventSubscriptionBuilder(logicalId)
    let docdbGlobalCluster logicalId = DocdbGlobalClusterBuilder(logicalId)
    let docdbSubnetGroup logicalId = DocdbSubnetGroupBuilder(logicalId)
    let docdbelasticCluster logicalId = DocdbelasticClusterBuilder(logicalId)
    let drsReplicationConfigurationTemplate logicalId = DrsReplicationConfigurationTemplateBuilder(logicalId)
    let dsqlCluster logicalId = DsqlClusterBuilder(logicalId)
    let dsqlClusterPeering logicalId = DsqlClusterPeeringBuilder(logicalId)
    let dxBgpPeer logicalId = DxBgpPeerBuilder(logicalId)
    let dxConnection logicalId = DxConnectionBuilder(logicalId)
    let dxConnectionAssociation logicalId = DxConnectionAssociationBuilder(logicalId)
    let dxConnectionConfirmation logicalId = DxConnectionConfirmationBuilder(logicalId)
    let dxGateway logicalId = DxGatewayBuilder(logicalId)
    let dxGatewayAssociation logicalId = DxGatewayAssociationBuilder(logicalId)
    let dxGatewayAssociationProposal logicalId = DxGatewayAssociationProposalBuilder(logicalId)
    let dxHostedConnection logicalId = DxHostedConnectionBuilder(logicalId)
    let dxHostedPrivateVirtualInterface logicalId = DxHostedPrivateVirtualInterfaceBuilder(logicalId)
    let dxHostedPrivateVirtualInterfaceAccepter logicalId = DxHostedPrivateVirtualInterfaceAccepterBuilder(logicalId)
    let dxHostedPublicVirtualInterface logicalId = DxHostedPublicVirtualInterfaceBuilder(logicalId)
    let dxHostedPublicVirtualInterfaceAccepter logicalId = DxHostedPublicVirtualInterfaceAccepterBuilder(logicalId)
    let dxHostedTransitVirtualInterface logicalId = DxHostedTransitVirtualInterfaceBuilder(logicalId)
    let dxHostedTransitVirtualInterfaceAccepter logicalId = DxHostedTransitVirtualInterfaceAccepterBuilder(logicalId)
    let dxLag logicalId = DxLagBuilder(logicalId)
    let dxMacsecKeyAssociation logicalId = DxMacsecKeyAssociationBuilder(logicalId)
    let dxPrivateVirtualInterface logicalId = DxPrivateVirtualInterfaceBuilder(logicalId)
    let dxPublicVirtualInterface logicalId = DxPublicVirtualInterfaceBuilder(logicalId)
    let dxTransitVirtualInterface logicalId = DxTransitVirtualInterfaceBuilder(logicalId)
    let dynamodbContributorInsights logicalId = DynamodbContributorInsightsBuilder(logicalId)
    let dynamodbGlobalTable logicalId = DynamodbGlobalTableBuilder(logicalId)
    let dynamodbKinesisStreamingDestination logicalId = DynamodbKinesisStreamingDestinationBuilder(logicalId)
    let dynamodbResourcePolicy logicalId = DynamodbResourcePolicyBuilder(logicalId)
    let dynamodbTable logicalId = DynamodbTableBuilder(logicalId)
    let dynamodbTableExport logicalId = DynamodbTableExportBuilder(logicalId)
    let dynamodbTableItem logicalId = DynamodbTableItemBuilder(logicalId)
    let dynamodbTableReplicaA logicalId = DynamodbTableReplicaABuilder(logicalId)
    let dynamodbTag logicalId = DynamodbTagBuilder(logicalId)
    let ebsDefaultKmsKey logicalId = EbsDefaultKmsKeyBuilder(logicalId)
    let ebsEncryptionByDefault logicalId = EbsEncryptionByDefaultBuilder(logicalId)
    let ebsFastSnapshotRestore logicalId = EbsFastSnapshotRestoreBuilder(logicalId)
    let ebsSnapshot logicalId = EbsSnapshotBuilder(logicalId)
    let ebsSnapshotBlockPublicAccess logicalId = EbsSnapshotBlockPublicAccessBuilder(logicalId)
    let ebsSnapshotCopy logicalId = EbsSnapshotCopyBuilder(logicalId)
    let ebsSnapshotImport logicalId = EbsSnapshotImportBuilder(logicalId)
    let ebsVolume logicalId = EbsVolumeBuilder(logicalId)
    let ec2AvailabilityZoneGroup logicalId = Ec2AvailabilityZoneGroupBuilder(logicalId)
    let ec2CapacityBlockReservation logicalId = Ec2CapacityBlockReservationBuilder(logicalId)
    let ec2CapacityReservation logicalId = Ec2CapacityReservationBuilder(logicalId)
    let ec2CarrierGateway logicalId = Ec2CarrierGatewayBuilder(logicalId)
    let ec2ClientVpnAuthorizationRule logicalId = Ec2ClientVpnAuthorizationRuleBuilder(logicalId)
    let ec2ClientVpnEndpoint logicalId = Ec2ClientVpnEndpointBuilder(logicalId)
    let ec2ClientVpnNetworkAssociation logicalId = Ec2ClientVpnNetworkAssociationBuilder(logicalId)
    let ec2ClientVpnRoute logicalId = Ec2ClientVpnRouteBuilder(logicalId)
    let ec2DefaultCreditSpecification logicalId = Ec2DefaultCreditSpecificationBuilder(logicalId)
    let ec2Fleet logicalId = Ec2FleetBuilder(logicalId)
    let ec2Host logicalId = Ec2HostBuilder(logicalId)
    let ec2ImageBlockPublicAccess logicalId = Ec2ImageBlockPublicAccessBuilder(logicalId)
    let ec2InstanceConnectEndpoint logicalId = Ec2InstanceConnectEndpointBuilder(logicalId)
    let ec2InstanceMetadataDefaults logicalId = Ec2InstanceMetadataDefaultsBuilder(logicalId)
    let ec2InstanceState logicalId = Ec2InstanceStateBuilder(logicalId)
    let ec2LocalGatewayRoute logicalId = Ec2LocalGatewayRouteBuilder(logicalId)
    let ec2LocalGatewayRouteTableVpcAssociation logicalId = Ec2LocalGatewayRouteTableVpcAssociationBuilder(logicalId)
    let ec2ManagedPrefixList logicalId = Ec2ManagedPrefixListBuilder(logicalId)
    let ec2ManagedPrefixListEntryA logicalId = Ec2ManagedPrefixListEntryABuilder(logicalId)
    let ec2NetworkInsightsAnalysis logicalId = Ec2NetworkInsightsAnalysisBuilder(logicalId)
    let ec2NetworkInsightsPath logicalId = Ec2NetworkInsightsPathBuilder(logicalId)
    let ec2SerialConsoleAccess logicalId = Ec2SerialConsoleAccessBuilder(logicalId)
    let ec2SubnetCidrReservation logicalId = Ec2SubnetCidrReservationBuilder(logicalId)
    let ec2Tag logicalId = Ec2TagBuilder(logicalId)
    let ec2TrafficMirrorFilter logicalId = Ec2TrafficMirrorFilterBuilder(logicalId)
    let ec2TrafficMirrorFilterRule logicalId = Ec2TrafficMirrorFilterRuleBuilder(logicalId)
    let ec2TrafficMirrorSession logicalId = Ec2TrafficMirrorSessionBuilder(logicalId)
    let ec2TrafficMirrorTarget logicalId = Ec2TrafficMirrorTargetBuilder(logicalId)
    let ec2TransitGateway logicalId = Ec2TransitGatewayBuilder(logicalId)
    let ec2TransitGatewayConnect logicalId = Ec2TransitGatewayConnectBuilder(logicalId)
    let ec2TransitGatewayConnectPeer logicalId = Ec2TransitGatewayConnectPeerBuilder(logicalId)
    let ec2TransitGatewayDefaultRouteTableAssociation logicalId = Ec2TransitGatewayDefaultRouteTableAssociationBuilder(logicalId)
    let ec2TransitGatewayDefaultRouteTablePropagation logicalId = Ec2TransitGatewayDefaultRouteTablePropagationBuilder(logicalId)
    let ec2TransitGatewayMulticastDomain logicalId = Ec2TransitGatewayMulticastDomainBuilder(logicalId)
    let ec2TransitGatewayMulticastDomainAssociation logicalId = Ec2TransitGatewayMulticastDomainAssociationBuilder(logicalId)
    let ec2TransitGatewayMulticastGroupMember logicalId = Ec2TransitGatewayMulticastGroupMemberBuilder(logicalId)
    let ec2TransitGatewayMulticastGroupSource logicalId = Ec2TransitGatewayMulticastGroupSourceBuilder(logicalId)
    let ec2TransitGatewayPeeringAttachment logicalId = Ec2TransitGatewayPeeringAttachmentBuilder(logicalId)
    let ec2TransitGatewayPeeringAttachmentAccepter logicalId = Ec2TransitGatewayPeeringAttachmentAccepterBuilder(logicalId)
    let ec2TransitGatewayPolicyTable logicalId = Ec2TransitGatewayPolicyTableBuilder(logicalId)
    let ec2TransitGatewayPolicyTableAssociation logicalId = Ec2TransitGatewayPolicyTableAssociationBuilder(logicalId)
    let ec2TransitGatewayPrefixListReference logicalId = Ec2TransitGatewayPrefixListReferenceBuilder(logicalId)
    let ec2TransitGatewayRoute logicalId = Ec2TransitGatewayRouteBuilder(logicalId)
    let ec2TransitGatewayRouteTable logicalId = Ec2TransitGatewayRouteTableBuilder(logicalId)
    let ec2TransitGatewayRouteTableAssociation logicalId = Ec2TransitGatewayRouteTableAssociationBuilder(logicalId)
    let ec2TransitGatewayRouteTablePropagation logicalId = Ec2TransitGatewayRouteTablePropagationBuilder(logicalId)
    let ec2TransitGatewayVpcAttachment logicalId = Ec2TransitGatewayVpcAttachmentBuilder(logicalId)
    let ec2TransitGatewayVpcAttachmentAccepter logicalId = Ec2TransitGatewayVpcAttachmentAccepterBuilder(logicalId)
    let ecrAccountSetting logicalId = EcrAccountSettingBuilder(logicalId)
    let ecrLifecyclePolicy logicalId = EcrLifecyclePolicyBuilder(logicalId)
    let ecrPullThroughCacheRule logicalId = EcrPullThroughCacheRuleBuilder(logicalId)
    let ecrRegistryPolicy logicalId = EcrRegistryPolicyBuilder(logicalId)
    let ecrRegistryScanningConfiguration logicalId = EcrRegistryScanningConfigurationBuilder(logicalId)
    let ecrReplicationConfiguration logicalId = EcrReplicationConfigurationBuilder(logicalId)
    let ecrRepository logicalId = EcrRepositoryBuilder(logicalId)
    let ecrRepositoryCreationTemplate logicalId = EcrRepositoryCreationTemplateBuilder(logicalId)
    let ecrRepositoryPolicy logicalId = EcrRepositoryPolicyBuilder(logicalId)
    let ecrpublicRepository logicalId = EcrpublicRepositoryBuilder(logicalId)
    let ecrpublicRepositoryPolicy logicalId = EcrpublicRepositoryPolicyBuilder(logicalId)
    let ecsAccountSettingDefault logicalId = EcsAccountSettingDefaultBuilder(logicalId)
    let ecsCapacityProvider logicalId = EcsCapacityProviderBuilder(logicalId)
    let ecsCluster logicalId = EcsClusterBuilder(logicalId)
    let ecsClusterCapacityProviders logicalId = EcsClusterCapacityProvidersBuilder(logicalId)
    let ecsService logicalId = EcsServiceBuilder(logicalId)
    let ecsTag logicalId = EcsTagBuilder(logicalId)
    let ecsTaskDefinition logicalId = EcsTaskDefinitionBuilder(logicalId)
    let ecsTaskSet logicalId = EcsTaskSetBuilder(logicalId)
    let efsAccessPoint logicalId = EfsAccessPointBuilder(logicalId)
    let efsBackupPolicy logicalId = EfsBackupPolicyBuilder(logicalId)
    let efsFileSystem logicalId = EfsFileSystemBuilder(logicalId)
    let efsFileSystemPolicy logicalId = EfsFileSystemPolicyBuilder(logicalId)
    let efsMountTarget logicalId = EfsMountTargetBuilder(logicalId)
    let efsReplicationConfiguration logicalId = EfsReplicationConfigurationBuilder(logicalId)
    let egressOnlyInternetGateway logicalId = EgressOnlyInternetGatewayBuilder(logicalId)
    let eip logicalId = EipBuilder(logicalId)
    let eipAssociation logicalId = EipAssociationBuilder(logicalId)
    let eipDomainName logicalId = EipDomainNameBuilder(logicalId)
    let eksAccessEntry logicalId = EksAccessEntryBuilder(logicalId)
    let eksAccessPolicyAssociation logicalId = EksAccessPolicyAssociationBuilder(logicalId)
    let eksAddon logicalId = EksAddonBuilder(logicalId)
    let eksCluster logicalId = EksClusterBuilder(logicalId)
    let eksFargateProfile logicalId = EksFargateProfileBuilder(logicalId)
    let eksIdentityProviderConfig logicalId = EksIdentityProviderConfigBuilder(logicalId)
    let eksNodeGroup logicalId = EksNodeGroupBuilder(logicalId)
    let eksPodIdentityAssociation logicalId = EksPodIdentityAssociationBuilder(logicalId)
    let elasticBeanstalkApplication logicalId = ElasticBeanstalkApplicationBuilder(logicalId)
    let elasticBeanstalkApplicationVersion logicalId = ElasticBeanstalkApplicationVersionBuilder(logicalId)
    let elasticBeanstalkConfigurationTemplate logicalId = ElasticBeanstalkConfigurationTemplateBuilder(logicalId)
    let elasticBeanstalkEnvironment logicalId = ElasticBeanstalkEnvironmentBuilder(logicalId)
    let elasticacheCluster logicalId = ElasticacheClusterBuilder(logicalId)
    let elasticacheGlobalReplicationGroup logicalId = ElasticacheGlobalReplicationGroupBuilder(logicalId)
    let elasticacheParameterGroup logicalId = ElasticacheParameterGroupBuilder(logicalId)
    let elasticacheReplicationGroup logicalId = ElasticacheReplicationGroupBuilder(logicalId)
    let elasticacheReservedCacheNode logicalId = ElasticacheReservedCacheNodeBuilder(logicalId)
    let elasticacheServerlessCache logicalId = ElasticacheServerlessCacheBuilder(logicalId)
    let elasticacheSubnetGroup logicalId = ElasticacheSubnetGroupBuilder(logicalId)
    let elasticacheUser logicalId = ElasticacheUserBuilder(logicalId)
    let elasticacheUserGroup logicalId = ElasticacheUserGroupBuilder(logicalId)
    let elasticacheUserGroupAssociation logicalId = ElasticacheUserGroupAssociationBuilder(logicalId)
    let elasticsearchDomain logicalId = ElasticsearchDomainBuilder(logicalId)
    let elasticsearchDomainPolicy logicalId = ElasticsearchDomainPolicyBuilder(logicalId)
    let elasticsearchDomainSamlOptions logicalId = ElasticsearchDomainSamlOptionsBuilder(logicalId)
    let elasticsearchVpcEndpoint logicalId = ElasticsearchVpcEndpointBuilder(logicalId)
    let elastictranscoderPipeline logicalId = ElastictranscoderPipelineBuilder(logicalId)
    let elastictranscoderPreset logicalId = ElastictranscoderPresetBuilder(logicalId)
    let elb logicalId = ElbBuilder(logicalId)
    let elbAttachment logicalId = ElbAttachmentBuilder(logicalId)
    let emrBlockPublicAccessConfiguration logicalId = EmrBlockPublicAccessConfigurationBuilder(logicalId)
    let emrCluster logicalId = EmrClusterBuilder(logicalId)
    let emrInstanceFleet logicalId = EmrInstanceFleetBuilder(logicalId)
    let emrInstanceGroup logicalId = EmrInstanceGroupBuilder(logicalId)
    let emrManagedScalingPolicy logicalId = EmrManagedScalingPolicyBuilder(logicalId)
    let emrSecurityConfiguration logicalId = EmrSecurityConfigurationBuilder(logicalId)
    let emrStudio logicalId = EmrStudioBuilder(logicalId)
    let emrStudioSessionMapping logicalId = EmrStudioSessionMappingBuilder(logicalId)
    let emrcontainersJobTemplate logicalId = EmrcontainersJobTemplateBuilder(logicalId)
    let emrcontainersVirtualCluster logicalId = EmrcontainersVirtualClusterBuilder(logicalId)
    let emrserverlessApplication logicalId = EmrserverlessApplicationBuilder(logicalId)
    let evidentlyFeature logicalId = EvidentlyFeatureBuilder(logicalId)
    let evidentlyLaunch logicalId = EvidentlyLaunchBuilder(logicalId)
    let evidentlyProject logicalId = EvidentlyProjectBuilder(logicalId)
    let evidentlySegment logicalId = EvidentlySegmentBuilder(logicalId)
    let finspaceKxCluster logicalId = FinspaceKxClusterBuilder(logicalId)
    let finspaceKxDatabase logicalId = FinspaceKxDatabaseBuilder(logicalId)
    let finspaceKxDataview logicalId = FinspaceKxDataviewBuilder(logicalId)
    let finspaceKxEnvironment logicalId = FinspaceKxEnvironmentBuilder(logicalId)
    let finspaceKxScalingGroup logicalId = FinspaceKxScalingGroupBuilder(logicalId)
    let finspaceKxUser logicalId = FinspaceKxUserBuilder(logicalId)
    let finspaceKxVolume logicalId = FinspaceKxVolumeBuilder(logicalId)
    let fisExperimentTemplate logicalId = FisExperimentTemplateBuilder(logicalId)
    let flowLog logicalId = FlowLogBuilder(logicalId)
    let fmsAdminAccount logicalId = FmsAdminAccountBuilder(logicalId)
    let fmsPolicy logicalId = FmsPolicyBuilder(logicalId)
    let fmsResourceSet logicalId = FmsResourceSetBuilder(logicalId)
    let fsxBackup logicalId = FsxBackupBuilder(logicalId)
    let fsxDataRepositoryAssociation logicalId = FsxDataRepositoryAssociationBuilder(logicalId)
    let fsxFileCache logicalId = FsxFileCacheBuilder(logicalId)
    let fsxLustreFileSystem logicalId = FsxLustreFileSystemBuilder(logicalId)
    let fsxOntapFileSystem logicalId = FsxOntapFileSystemBuilder(logicalId)
    let fsxOntapStorageVirtualMachine logicalId = FsxOntapStorageVirtualMachineBuilder(logicalId)
    let fsxOntapVolume logicalId = FsxOntapVolumeBuilder(logicalId)
    let fsxOpenzfsFileSystem logicalId = FsxOpenzfsFileSystemBuilder(logicalId)
    let fsxOpenzfsSnapshot logicalId = FsxOpenzfsSnapshotBuilder(logicalId)
    let fsxOpenzfsVolume logicalId = FsxOpenzfsVolumeBuilder(logicalId)
    let fsxWindowsFileSystem logicalId = FsxWindowsFileSystemBuilder(logicalId)
    let gameliftAlias logicalId = GameliftAliasBuilder(logicalId)
    let gameliftBuild logicalId = GameliftBuildBuilder(logicalId)
    let gameliftFleet logicalId = GameliftFleetBuilder(logicalId)
    let gameliftGameServerGroup logicalId = GameliftGameServerGroupBuilder(logicalId)
    let gameliftGameSessionQueue logicalId = GameliftGameSessionQueueBuilder(logicalId)
    let gameliftScript logicalId = GameliftScriptBuilder(logicalId)
    let glacierVault logicalId = GlacierVaultBuilder(logicalId)
    let glacierVaultLock logicalId = GlacierVaultLockBuilder(logicalId)
    let globalacceleratorAccelerator logicalId = GlobalacceleratorAcceleratorBuilder(logicalId)
    let globalacceleratorCrossAccountAttachment logicalId = GlobalacceleratorCrossAccountAttachmentBuilder(logicalId)
    let globalacceleratorCustomRoutingAccelerator logicalId = GlobalacceleratorCustomRoutingAcceleratorBuilder(logicalId)
    let globalacceleratorCustomRoutingEndpointGroup logicalId = GlobalacceleratorCustomRoutingEndpointGroupBuilder(logicalId)
    let globalacceleratorCustomRoutingListener logicalId = GlobalacceleratorCustomRoutingListenerBuilder(logicalId)
    let globalacceleratorEndpointGroup logicalId = GlobalacceleratorEndpointGroupBuilder(logicalId)
    let globalacceleratorListener logicalId = GlobalacceleratorListenerBuilder(logicalId)
    let glueCatalogDatabase logicalId = GlueCatalogDatabaseBuilder(logicalId)
    let glueCatalogTable logicalId = GlueCatalogTableBuilder(logicalId)
    let glueCatalogTableOptimizer logicalId = GlueCatalogTableOptimizerBuilder(logicalId)
    let glueClassifier logicalId = GlueClassifierBuilder(logicalId)
    let glueConnection logicalId = GlueConnectionBuilder(logicalId)
    let glueCrawler logicalId = GlueCrawlerBuilder(logicalId)
    let glueDataCatalogEncryptionSettings logicalId = GlueDataCatalogEncryptionSettingsBuilder(logicalId)
    let glueDataQualityRuleset logicalId = GlueDataQualityRulesetBuilder(logicalId)
    let glueDevEndpoint logicalId = GlueDevEndpointBuilder(logicalId)
    let glueJob logicalId = GlueJobBuilder(logicalId)
    let glueMlTransform logicalId = GlueMlTransformBuilder(logicalId)
    let gluePartition logicalId = GluePartitionBuilder(logicalId)
    let gluePartitionIndex logicalId = GluePartitionIndexBuilder(logicalId)
    let glueRegistry logicalId = GlueRegistryBuilder(logicalId)
    let glueResourcePolicy logicalId = GlueResourcePolicyBuilder(logicalId)
    let glueSchema logicalId = GlueSchemaBuilder(logicalId)
    let glueSecurityConfiguration logicalId = GlueSecurityConfigurationBuilder(logicalId)
    let glueTrigger logicalId = GlueTriggerBuilder(logicalId)
    let glueUserDefinedFunction logicalId = GlueUserDefinedFunctionBuilder(logicalId)
    let glueWorkflow logicalId = GlueWorkflowBuilder(logicalId)
    let grafanaLicenseAssociation logicalId = GrafanaLicenseAssociationBuilder(logicalId)
    let grafanaRoleAssociation logicalId = GrafanaRoleAssociationBuilder(logicalId)
    let grafanaWorkspace logicalId = GrafanaWorkspaceBuilder(logicalId)
    let grafanaWorkspaceApiKey logicalId = GrafanaWorkspaceApiKeyBuilder(logicalId)
    let grafanaWorkspaceSamlConfiguration logicalId = GrafanaWorkspaceSamlConfigurationBuilder(logicalId)
    let grafanaWorkspaceServiceAccount logicalId = GrafanaWorkspaceServiceAccountBuilder(logicalId)
    let grafanaWorkspaceServiceAccountToken logicalId = GrafanaWorkspaceServiceAccountTokenBuilder(logicalId)
    let guarddutyDetector logicalId = GuarddutyDetectorBuilder(logicalId)
    let guarddutyDetectorFeature logicalId = GuarddutyDetectorFeatureBuilder(logicalId)
    let guarddutyFilter logicalId = GuarddutyFilterBuilder(logicalId)
    let guarddutyInviteAccepter logicalId = GuarddutyInviteAccepterBuilder(logicalId)
    let guarddutyIpset logicalId = GuarddutyIpsetBuilder(logicalId)
    let guarddutyMalwareProtectionPlan logicalId = GuarddutyMalwareProtectionPlanBuilder(logicalId)
    let guarddutyMember logicalId = GuarddutyMemberBuilder(logicalId)
    let guarddutyMemberDetectorFeature logicalId = GuarddutyMemberDetectorFeatureBuilder(logicalId)
    let guarddutyOrganizationAdminAccount logicalId = GuarddutyOrganizationAdminAccountBuilder(logicalId)
    let guarddutyOrganizationConfiguration logicalId = GuarddutyOrganizationConfigurationBuilder(logicalId)
    let guarddutyOrganizationConfigurationFeature logicalId = GuarddutyOrganizationConfigurationFeatureBuilder(logicalId)
    let guarddutyPublishingDestination logicalId = GuarddutyPublishingDestinationBuilder(logicalId)
    let guarddutyThreatintelset logicalId = GuarddutyThreatintelsetBuilder(logicalId)
    let iamAccessKey logicalId = IamAccessKeyBuilder(logicalId)
    let iamAccountAlias logicalId = IamAccountAliasBuilder(logicalId)
    let iamAccountPasswordPolicy logicalId = IamAccountPasswordPolicyBuilder(logicalId)
    let iamGroup logicalId = IamGroupBuilder(logicalId)
    let iamGroupMembership logicalId = IamGroupMembershipBuilder(logicalId)
    let iamGroupPoliciesExclusive logicalId = IamGroupPoliciesExclusiveBuilder(logicalId)
    let iamGroupPolicy logicalId = IamGroupPolicyBuilder(logicalId)
    let iamGroupPolicyAttachment logicalId = IamGroupPolicyAttachmentBuilder(logicalId)
    let iamGroupPolicyAttachmentsExclusive logicalId = IamGroupPolicyAttachmentsExclusiveBuilder(logicalId)
    let iamInstanceProfile logicalId = IamInstanceProfileBuilder(logicalId)
    let iamOpenidConnectProvider logicalId = IamOpenidConnectProviderBuilder(logicalId)
    let iamOrganizationsFeatures logicalId = IamOrganizationsFeaturesBuilder(logicalId)
    let iamPolicy logicalId = IamPolicyBuilder(logicalId)
    let iamPolicyAttachment logicalId = IamPolicyAttachmentBuilder(logicalId)
    let iamRole logicalId = IamRoleBuilder(logicalId)
    let iamRolePoliciesExclusive logicalId = IamRolePoliciesExclusiveBuilder(logicalId)
    let iamRolePolicy logicalId = IamRolePolicyBuilder(logicalId)
    let iamRolePolicyAttachment logicalId = IamRolePolicyAttachmentBuilder(logicalId)
    let iamRolePolicyAttachmentsExclusive logicalId = IamRolePolicyAttachmentsExclusiveBuilder(logicalId)
    let iamSamlProvider logicalId = IamSamlProviderBuilder(logicalId)
    let iamSecurityTokenServicePreferences logicalId = IamSecurityTokenServicePreferencesBuilder(logicalId)
    let iamServerCertificate logicalId = IamServerCertificateBuilder(logicalId)
    let iamServiceLinkedRole logicalId = IamServiceLinkedRoleBuilder(logicalId)
    let iamServiceSpecificCredential logicalId = IamServiceSpecificCredentialBuilder(logicalId)
    let iamSigningCertificate logicalId = IamSigningCertificateBuilder(logicalId)
    let iamUser logicalId = IamUserBuilder(logicalId)
    let iamUserGroupMembership logicalId = IamUserGroupMembershipBuilder(logicalId)
    let iamUserLoginProfile logicalId = IamUserLoginProfileBuilder(logicalId)
    let iamUserPoliciesExclusive logicalId = IamUserPoliciesExclusiveBuilder(logicalId)
    let iamUserPolicy logicalId = IamUserPolicyBuilder(logicalId)
    let iamUserPolicyAttachment logicalId = IamUserPolicyAttachmentBuilder(logicalId)
    let iamUserPolicyAttachmentsExclusive logicalId = IamUserPolicyAttachmentsExclusiveBuilder(logicalId)
    let iamUserSshKey logicalId = IamUserSshKeyBuilder(logicalId)
    let iamVirtualMfaDevice logicalId = IamVirtualMfaDeviceBuilder(logicalId)
    let identitystoreGroup logicalId = IdentitystoreGroupBuilder(logicalId)
    let identitystoreGroupMembership logicalId = IdentitystoreGroupMembershipBuilder(logicalId)
    let identitystoreUser logicalId = IdentitystoreUserBuilder(logicalId)
    let imagebuilderComponent logicalId = ImagebuilderComponentBuilder(logicalId)
    let imagebuilderContainerRecipe logicalId = ImagebuilderContainerRecipeBuilder(logicalId)
    let imagebuilderDistributionConfiguration logicalId = ImagebuilderDistributionConfigurationBuilder(logicalId)
    let imagebuilderImage logicalId = ImagebuilderImageBuilder(logicalId)
    let imagebuilderImagePipeline logicalId = ImagebuilderImagePipelineBuilder(logicalId)
    let imagebuilderImageRecipe logicalId = ImagebuilderImageRecipeBuilder(logicalId)
    let imagebuilderInfrastructureConfiguration logicalId = ImagebuilderInfrastructureConfigurationBuilder(logicalId)
    let imagebuilderLifecyclePolicy logicalId = ImagebuilderLifecyclePolicyBuilder(logicalId)
    let imagebuilderWorkflow logicalId = ImagebuilderWorkflowBuilder(logicalId)
    let inspector2DelegatedAdminAccount logicalId = Inspector2DelegatedAdminAccountBuilder(logicalId)
    let inspector2Enabler logicalId = Inspector2EnablerBuilder(logicalId)
    let inspector2Filter logicalId = Inspector2FilterBuilder(logicalId)
    let inspector2MemberAssociation logicalId = Inspector2MemberAssociationBuilder(logicalId)
    let inspector2OrganizationConfiguration logicalId = Inspector2OrganizationConfigurationBuilder(logicalId)
    let inspectorAssessmentTarget logicalId = InspectorAssessmentTargetBuilder(logicalId)
    let inspectorAssessmentTemplate logicalId = InspectorAssessmentTemplateBuilder(logicalId)
    let inspectorResourceGroup logicalId = InspectorResourceGroupBuilder(logicalId)
    let instance logicalId = InstanceBuilder(logicalId)
    let internetGateway logicalId = InternetGatewayBuilder(logicalId)
    let internetGatewayAttachment logicalId = InternetGatewayAttachmentBuilder(logicalId)
    let internetmonitorMonitor logicalId = InternetmonitorMonitorBuilder(logicalId)
    let iotAuthorizer logicalId = IotAuthorizerBuilder(logicalId)
    let iotBillingGroup logicalId = IotBillingGroupBuilder(logicalId)
    let iotCaCertificate logicalId = IotCaCertificateBuilder(logicalId)
    let iotCertificate logicalId = IotCertificateBuilder(logicalId)
    let iotDomainConfiguration logicalId = IotDomainConfigurationBuilder(logicalId)
    let iotEventConfigurations logicalId = IotEventConfigurationsBuilder(logicalId)
    let iotIndexingConfiguration logicalId = IotIndexingConfigurationBuilder(logicalId)
    let iotLoggingOptions logicalId = IotLoggingOptionsBuilder(logicalId)
    let iotPolicy logicalId = IotPolicyBuilder(logicalId)
    let iotPolicyAttachment logicalId = IotPolicyAttachmentBuilder(logicalId)
    let iotProvisioningTemplate logicalId = IotProvisioningTemplateBuilder(logicalId)
    let iotRoleAlias logicalId = IotRoleAliasBuilder(logicalId)
    let iotThing logicalId = IotThingBuilder(logicalId)
    let iotThingGroup logicalId = IotThingGroupBuilder(logicalId)
    let iotThingGroupMembership logicalId = IotThingGroupMembershipBuilder(logicalId)
    let iotThingPrincipalAttachment logicalId = IotThingPrincipalAttachmentBuilder(logicalId)
    let iotThingType logicalId = IotThingTypeBuilder(logicalId)
    let iotTopicRule logicalId = IotTopicRuleBuilder(logicalId)
    let iotTopicRuleDestination logicalId = IotTopicRuleDestinationBuilder(logicalId)
    let ivsChannel logicalId = IvsChannelBuilder(logicalId)
    let ivsPlaybackKeyPair logicalId = IvsPlaybackKeyPairBuilder(logicalId)
    let ivsRecordingConfiguration logicalId = IvsRecordingConfigurationBuilder(logicalId)
    let ivschatLoggingConfiguration logicalId = IvschatLoggingConfigurationBuilder(logicalId)
    let ivschatRoom logicalId = IvschatRoomBuilder(logicalId)
    let kendraDataSource logicalId = KendraDataSourceBuilder(logicalId)
    let kendraExperience logicalId = KendraExperienceBuilder(logicalId)
    let kendraFaq logicalId = KendraFaqBuilder(logicalId)
    let kendraIndex logicalId = KendraIndexBuilder(logicalId)
    let kendraQuerySuggestionsBlockList logicalId = KendraQuerySuggestionsBlockListBuilder(logicalId)
    let kendraThesaurus logicalId = KendraThesaurusBuilder(logicalId)
    let keyPair logicalId = KeyPairBuilder(logicalId)
    let keyspacesKeyspace logicalId = KeyspacesKeyspaceBuilder(logicalId)
    let keyspacesTable logicalId = KeyspacesTableBuilder(logicalId)
    let kinesisAnalyticsApplication logicalId = KinesisAnalyticsApplicationBuilder(logicalId)
    let kinesisFirehoseDeliveryStream logicalId = KinesisFirehoseDeliveryStreamBuilder(logicalId)
    let kinesisResourcePolicy logicalId = KinesisResourcePolicyBuilder(logicalId)
    let kinesisStream logicalId = KinesisStreamBuilder(logicalId)
    let kinesisStreamConsumer logicalId = KinesisStreamConsumerBuilder(logicalId)
    let kinesisVideoStream logicalId = KinesisVideoStreamBuilder(logicalId)
    let kinesisanalyticsv2Application logicalId = Kinesisanalyticsv2ApplicationBuilder(logicalId)
    let kinesisanalyticsv2ApplicationSnapshot logicalId = Kinesisanalyticsv2ApplicationSnapshotBuilder(logicalId)
    let kmsAlias logicalId = KmsAliasBuilder(logicalId)
    let kmsCiphertext logicalId = KmsCiphertextBuilder(logicalId)
    let kmsCustomKeyStore logicalId = KmsCustomKeyStoreBuilder(logicalId)
    let kmsExternalKey logicalId = KmsExternalKeyBuilder(logicalId)
    let kmsGrant logicalId = KmsGrantBuilder(logicalId)
    let kmsKey logicalId = KmsKeyBuilder(logicalId)
    let kmsKeyPolicy logicalId = KmsKeyPolicyBuilder(logicalId)
    let kmsReplicaExternalKey logicalId = KmsReplicaExternalKeyBuilder(logicalId)
    let kmsReplicaKey logicalId = KmsReplicaKeyBuilder(logicalId)
    let lakeformationDataCellsFilter logicalId = LakeformationDataCellsFilterBuilder(logicalId)
    let lakeformationDataLakeSettings logicalId = LakeformationDataLakeSettingsBuilder(logicalId)
    let lakeformationLfTag logicalId = LakeformationLfTagBuilder(logicalId)
    let lakeformationOptIn logicalId = LakeformationOptInBuilder(logicalId)
    let lakeformationPermissions logicalId = LakeformationPermissionsBuilder(logicalId)
    let lakeformationResource logicalId = LakeformationResourceBuilder(logicalId)
    let lakeformationResourceLfTag logicalId = LakeformationResourceLfTagBuilder(logicalId)
    let lakeformationResourceLfTags logicalId = LakeformationResourceLfTagsBuilder(logicalId)
    let lambdaAlias logicalId = LambdaAliasBuilder(logicalId)
    let lambdaCodeSigningConfig logicalId = LambdaCodeSigningConfigBuilder(logicalId)
    let lambdaEventSourceMapping logicalId = LambdaEventSourceMappingBuilder(logicalId)
    let lambdaFunction logicalId = LambdaFunctionBuilder(logicalId)
    let lambdaFunctionEventInvokeConfig logicalId = LambdaFunctionEventInvokeConfigBuilder(logicalId)
    let lambdaFunctionRecursionConfig logicalId = LambdaFunctionRecursionConfigBuilder(logicalId)
    let lambdaFunctionUrl logicalId = LambdaFunctionUrlBuilder(logicalId)
    let lambdaInvocation logicalId = LambdaInvocationBuilder(logicalId)
    let lambdaLayerVersion logicalId = LambdaLayerVersionBuilder(logicalId)
    let lambdaLayerVersionPermission logicalId = LambdaLayerVersionPermissionBuilder(logicalId)
    let lambdaPermission logicalId = LambdaPermissionBuilder(logicalId)
    let lambdaProvisionedConcurrencyConfig logicalId = LambdaProvisionedConcurrencyConfigBuilder(logicalId)
    let lambdaRuntimeManagementConfig logicalId = LambdaRuntimeManagementConfigBuilder(logicalId)
    let launchConfiguration logicalId = LaunchConfigurationBuilder(logicalId)
    let launchTemplate logicalId = LaunchTemplateBuilder(logicalId)
    let lb logicalId = LbBuilder(logicalId)
    let lbCookieStickinessPolicy logicalId = LbCookieStickinessPolicyBuilder(logicalId)
    let lbListener logicalId = LbListenerBuilder(logicalId)
    let lbListenerCertificate logicalId = LbListenerCertificateBuilder(logicalId)
    let lbListenerRule logicalId = LbListenerRuleBuilder(logicalId)
    let lbSslNegotiationPolicy logicalId = LbSslNegotiationPolicyBuilder(logicalId)
    let lbTargetGroup logicalId = LbTargetGroupBuilder(logicalId)
    let lbTargetGroupAttachment logicalId = LbTargetGroupAttachmentBuilder(logicalId)
    let lbTrustStore logicalId = LbTrustStoreBuilder(logicalId)
    let lbTrustStoreRevocation logicalId = LbTrustStoreRevocationBuilder(logicalId)
    let lexBot logicalId = LexBotBuilder(logicalId)
    let lexBotAlias logicalId = LexBotAliasBuilder(logicalId)
    let lexIntent logicalId = LexIntentBuilder(logicalId)
    let lexSlotType logicalId = LexSlotTypeBuilder(logicalId)
    let lexv2ModelsBot logicalId = Lexv2ModelsBotBuilder(logicalId)
    let lexv2ModelsBotLocale logicalId = Lexv2ModelsBotLocaleBuilder(logicalId)
    let lexv2ModelsBotVersion logicalId = Lexv2ModelsBotVersionBuilder(logicalId)
    let lexv2ModelsIntent logicalId = Lexv2ModelsIntentBuilder(logicalId)
    let lexv2ModelsSlot logicalId = Lexv2ModelsSlotBuilder(logicalId)
    let lexv2ModelsSlotType logicalId = Lexv2ModelsSlotTypeBuilder(logicalId)
    let licensemanagerAssociation logicalId = LicensemanagerAssociationBuilder(logicalId)
    let licensemanagerGrant logicalId = LicensemanagerGrantBuilder(logicalId)
    let licensemanagerGrantAccepter logicalId = LicensemanagerGrantAccepterBuilder(logicalId)
    let licensemanagerLicenseConfiguration logicalId = LicensemanagerLicenseConfigurationBuilder(logicalId)
    let lightsailBucket logicalId = LightsailBucketBuilder(logicalId)
    let lightsailBucketAccessKey logicalId = LightsailBucketAccessKeyBuilder(logicalId)
    let lightsailBucketResourceAccess logicalId = LightsailBucketResourceAccessBuilder(logicalId)
    let lightsailCertificate logicalId = LightsailCertificateBuilder(logicalId)
    let lightsailContainerService logicalId = LightsailContainerServiceBuilder(logicalId)
    let lightsailContainerServiceDeploymentVersion logicalId = LightsailContainerServiceDeploymentVersionBuilder(logicalId)
    let lightsailDatabase logicalId = LightsailDatabaseBuilder(logicalId)
    let lightsailDisk logicalId = LightsailDiskBuilder(logicalId)
    let lightsailDiskAttachment logicalId = LightsailDiskAttachmentBuilder(logicalId)
    let lightsailDistribution logicalId = LightsailDistributionBuilder(logicalId)
    let lightsailDomain logicalId = LightsailDomainBuilder(logicalId)
    let lightsailDomainEntry logicalId = LightsailDomainEntryBuilder(logicalId)
    let lightsailInstance logicalId = LightsailInstanceBuilder(logicalId)
    let lightsailInstancePublicPorts logicalId = LightsailInstancePublicPortsBuilder(logicalId)
    let lightsailKeyPair logicalId = LightsailKeyPairBuilder(logicalId)
    let lightsailLb logicalId = LightsailLbBuilder(logicalId)
    let lightsailLbAttachment logicalId = LightsailLbAttachmentBuilder(logicalId)
    let lightsailLbCertificate logicalId = LightsailLbCertificateBuilder(logicalId)
    let lightsailLbCertificateAttachment logicalId = LightsailLbCertificateAttachmentBuilder(logicalId)
    let lightsailLbHttpsRedirectionPolicy logicalId = LightsailLbHttpsRedirectionPolicyBuilder(logicalId)
    let lightsailLbStickinessPolicy logicalId = LightsailLbStickinessPolicyBuilder(logicalId)
    let lightsailStaticIp logicalId = LightsailStaticIpBuilder(logicalId)
    let lightsailStaticIpAttachment logicalId = LightsailStaticIpAttachmentBuilder(logicalId)
    let loadBalancerBackendServerPolicy logicalId = LoadBalancerBackendServerPolicyBuilder(logicalId)
    let loadBalancerListenerPolicy logicalId = LoadBalancerListenerPolicyBuilder(logicalId)
    let loadBalancerPolicy logicalId = LoadBalancerPolicyBuilder(logicalId)
    let locationGeofenceCollection logicalId = LocationGeofenceCollectionBuilder(logicalId)
    let locationMap logicalId = LocationMapBuilder(logicalId)
    let locationPlaceIndex logicalId = LocationPlaceIndexBuilder(logicalId)
    let locationRouteCalculator logicalId = LocationRouteCalculatorBuilder(logicalId)
    let locationTracker logicalId = LocationTrackerBuilder(logicalId)
    let locationTrackerAssociation logicalId = LocationTrackerAssociationBuilder(logicalId)
    let m2Application logicalId = M2ApplicationBuilder(logicalId)
    let m2Deployment logicalId = M2DeploymentBuilder(logicalId)
    let m2Environment logicalId = M2EnvironmentBuilder(logicalId)
    let macie2Account logicalId = Macie2AccountBuilder(logicalId)
    let macie2ClassificationExportConfiguration logicalId = Macie2ClassificationExportConfigurationBuilder(logicalId)
    let macie2ClassificationJob logicalId = Macie2ClassificationJobBuilder(logicalId)
    let macie2CustomDataIdentifier logicalId = Macie2CustomDataIdentifierBuilder(logicalId)
    let macie2FindingsFilter logicalId = Macie2FindingsFilterBuilder(logicalId)
    let macie2InvitationAccepter logicalId = Macie2InvitationAccepterBuilder(logicalId)
    let macie2Member logicalId = Macie2MemberBuilder(logicalId)
    let macie2OrganizationAdminAccount logicalId = Macie2OrganizationAdminAccountBuilder(logicalId)
    let macie2OrganizationConfiguration logicalId = Macie2OrganizationConfigurationBuilder(logicalId)
    let mainRouteTableAssociation logicalId = MainRouteTableAssociationBuilder(logicalId)
    let mediaConvertQueue logicalId = MediaConvertQueueBuilder(logicalId)
    let mediaPackageChannel logicalId = MediaPackageChannelBuilder(logicalId)
    let mediaPackagev2ChannelGroup logicalId = MediaPackagev2ChannelGroupBuilder(logicalId)
    let mediaStoreContainer logicalId = MediaStoreContainerBuilder(logicalId)
    let mediaStoreContainerPolicy logicalId = MediaStoreContainerPolicyBuilder(logicalId)
    let medialiveChannel logicalId = MedialiveChannelBuilder(logicalId)
    let medialiveInput logicalId = MedialiveInputBuilder(logicalId)
    let medialiveInputSecurityGroup logicalId = MedialiveInputSecurityGroupBuilder(logicalId)
    let medialiveMultiplex logicalId = MedialiveMultiplexBuilder(logicalId)
    let medialiveMultiplexProgram logicalId = MedialiveMultiplexProgramBuilder(logicalId)
    let memorydbAcl logicalId = MemorydbAclBuilder(logicalId)
    let memorydbCluster logicalId = MemorydbClusterBuilder(logicalId)
    let memorydbMultiRegionCluster logicalId = MemorydbMultiRegionClusterBuilder(logicalId)
    let memorydbParameterGroup logicalId = MemorydbParameterGroupBuilder(logicalId)
    let memorydbSnapshot logicalId = MemorydbSnapshotBuilder(logicalId)
    let memorydbSubnetGroup logicalId = MemorydbSubnetGroupBuilder(logicalId)
    let memorydbUser logicalId = MemorydbUserBuilder(logicalId)
    let mqBroker logicalId = MqBrokerBuilder(logicalId)
    let mqConfiguration logicalId = MqConfigurationBuilder(logicalId)
    let mskCluster logicalId = MskClusterBuilder(logicalId)
    let mskClusterPolicy logicalId = MskClusterPolicyBuilder(logicalId)
    let mskConfiguration logicalId = MskConfigurationBuilder(logicalId)
    let mskReplicator logicalId = MskReplicatorBuilder(logicalId)
    let mskScramSecretAssociation logicalId = MskScramSecretAssociationBuilder(logicalId)
    let mskServerlessCluster logicalId = MskServerlessClusterBuilder(logicalId)
    let mskSingleScramSecretAssociation logicalId = MskSingleScramSecretAssociationBuilder(logicalId)
    let mskVpcConnection logicalId = MskVpcConnectionBuilder(logicalId)
    let mskconnectConnector logicalId = MskconnectConnectorBuilder(logicalId)
    let mskconnectCustomPlugin logicalId = MskconnectCustomPluginBuilder(logicalId)
    let mskconnectWorkerConfiguration logicalId = MskconnectWorkerConfigurationBuilder(logicalId)
    let mwaaEnvironment logicalId = MwaaEnvironmentBuilder(logicalId)
    let natGateway logicalId = NatGatewayBuilder(logicalId)
    let neptuneCluster logicalId = NeptuneClusterBuilder(logicalId)
    let neptuneClusterEndpoint logicalId = NeptuneClusterEndpointBuilder(logicalId)
    let neptuneClusterInstance logicalId = NeptuneClusterInstanceBuilder(logicalId)
    let neptuneClusterParameterGroup logicalId = NeptuneClusterParameterGroupBuilder(logicalId)
    let neptuneClusterSnapshot logicalId = NeptuneClusterSnapshotBuilder(logicalId)
    let neptuneEventSubscription logicalId = NeptuneEventSubscriptionBuilder(logicalId)
    let neptuneGlobalCluster logicalId = NeptuneGlobalClusterBuilder(logicalId)
    let neptuneParameterGroup logicalId = NeptuneParameterGroupBuilder(logicalId)
    let neptuneSubnetGroup logicalId = NeptuneSubnetGroupBuilder(logicalId)
    let neptunegraphGraph logicalId = NeptunegraphGraphBuilder(logicalId)
    let networkAcl logicalId = NetworkAclBuilder(logicalId)
    let networkAclAssociation logicalId = NetworkAclAssociationBuilder(logicalId)
    let networkAclRule logicalId = NetworkAclRuleBuilder(logicalId)
    let networkInterface logicalId = NetworkInterfaceBuilder(logicalId)
    let networkInterfaceAttachmentA logicalId = NetworkInterfaceAttachmentABuilder(logicalId)
    let networkInterfacePermission logicalId = NetworkInterfacePermissionBuilder(logicalId)
    let networkInterfaceSgAttachment logicalId = NetworkInterfaceSgAttachmentBuilder(logicalId)
    let networkfirewallFirewall logicalId = NetworkfirewallFirewallBuilder(logicalId)
    let networkfirewallFirewallPolicy logicalId = NetworkfirewallFirewallPolicyBuilder(logicalId)
    let networkfirewallLoggingConfiguration logicalId = NetworkfirewallLoggingConfigurationBuilder(logicalId)
    let networkfirewallResourcePolicy logicalId = NetworkfirewallResourcePolicyBuilder(logicalId)
    let networkfirewallRuleGroup logicalId = NetworkfirewallRuleGroupBuilder(logicalId)
    let networkfirewallTlsInspectionConfiguration logicalId = NetworkfirewallTlsInspectionConfigurationBuilder(logicalId)
    let networkmanagerAttachmentAccepter logicalId = NetworkmanagerAttachmentAccepterBuilder(logicalId)
    let networkmanagerConnectAttachment logicalId = NetworkmanagerConnectAttachmentBuilder(logicalId)
    let networkmanagerConnectPeer logicalId = NetworkmanagerConnectPeerBuilder(logicalId)
    let networkmanagerConnection logicalId = NetworkmanagerConnectionBuilder(logicalId)
    let networkmanagerCoreNetwork logicalId = NetworkmanagerCoreNetworkBuilder(logicalId)
    let networkmanagerCoreNetworkPolicyAttachment logicalId = NetworkmanagerCoreNetworkPolicyAttachmentBuilder(logicalId)
    let networkmanagerCustomerGatewayAssociation logicalId = NetworkmanagerCustomerGatewayAssociationBuilder(logicalId)
    let networkmanagerDevice logicalId = NetworkmanagerDeviceBuilder(logicalId)
    let networkmanagerDxGatewayAttachment logicalId = NetworkmanagerDxGatewayAttachmentBuilder(logicalId)
    let networkmanagerGlobalNetwork logicalId = NetworkmanagerGlobalNetworkBuilder(logicalId)
    let networkmanagerLink logicalId = NetworkmanagerLinkBuilder(logicalId)
    let networkmanagerLinkAssociation logicalId = NetworkmanagerLinkAssociationBuilder(logicalId)
    let networkmanagerSite logicalId = NetworkmanagerSiteBuilder(logicalId)
    let networkmanagerSiteToSiteVpnAttachment logicalId = NetworkmanagerSiteToSiteVpnAttachmentBuilder(logicalId)
    let networkmanagerTransitGatewayConnectPeerAssociation logicalId = NetworkmanagerTransitGatewayConnectPeerAssociationBuilder(logicalId)
    let networkmanagerTransitGatewayPeering logicalId = NetworkmanagerTransitGatewayPeeringBuilder(logicalId)
    let networkmanagerTransitGatewayRegistration logicalId = NetworkmanagerTransitGatewayRegistrationBuilder(logicalId)
    let networkmanagerTransitGatewayRouteTableAttachment logicalId = NetworkmanagerTransitGatewayRouteTableAttachmentBuilder(logicalId)
    let networkmanagerVpcAttachment logicalId = NetworkmanagerVpcAttachmentBuilder(logicalId)
    let networkmonitorMonitor logicalId = NetworkmonitorMonitorBuilder(logicalId)
    let networkmonitorProbe logicalId = NetworkmonitorProbeBuilder(logicalId)
    let notificationsChannelAssociation logicalId = NotificationsChannelAssociationBuilder(logicalId)
    let notificationsEventRule logicalId = NotificationsEventRuleBuilder(logicalId)
    let notificationsNotificationConfiguration logicalId = NotificationsNotificationConfigurationBuilder(logicalId)
    let notificationsNotificationHub logicalId = NotificationsNotificationHubBuilder(logicalId)
    let notificationscontactsEmailContact logicalId = NotificationscontactsEmailContactBuilder(logicalId)
    let oamLink logicalId = OamLinkBuilder(logicalId)
    let oamSink logicalId = OamSinkBuilder(logicalId)
    let oamSinkPolicy logicalId = OamSinkPolicyBuilder(logicalId)
    let opensearchAuthorizeVpcEndpointAccess logicalId = OpensearchAuthorizeVpcEndpointAccessBuilder(logicalId)
    let opensearchDomain logicalId = OpensearchDomainBuilder(logicalId)
    let opensearchDomainPolicy logicalId = OpensearchDomainPolicyBuilder(logicalId)
    let opensearchDomainSamlOptions logicalId = OpensearchDomainSamlOptionsBuilder(logicalId)
    let opensearchInboundConnectionAccepter logicalId = OpensearchInboundConnectionAccepterBuilder(logicalId)
    let opensearchOutboundConnection logicalId = OpensearchOutboundConnectionBuilder(logicalId)
    let opensearchPackage logicalId = OpensearchPackageBuilder(logicalId)
    let opensearchPackageAssociation logicalId = OpensearchPackageAssociationBuilder(logicalId)
    let opensearchVpcEndpoint logicalId = OpensearchVpcEndpointBuilder(logicalId)
    let opensearchserverlessAccessPolicy logicalId = OpensearchserverlessAccessPolicyBuilder(logicalId)
    let opensearchserverlessCollection logicalId = OpensearchserverlessCollectionBuilder(logicalId)
    let opensearchserverlessLifecyclePolicy logicalId = OpensearchserverlessLifecyclePolicyBuilder(logicalId)
    let opensearchserverlessSecurityConfig logicalId = OpensearchserverlessSecurityConfigBuilder(logicalId)
    let opensearchserverlessSecurityPolicy logicalId = OpensearchserverlessSecurityPolicyBuilder(logicalId)
    let opensearchserverlessVpcEndpoint logicalId = OpensearchserverlessVpcEndpointBuilder(logicalId)
    let opsworksApplication logicalId = OpsworksApplicationBuilder(logicalId)
    let opsworksCustomLayer logicalId = OpsworksCustomLayerBuilder(logicalId)
    let opsworksEcsClusterLayer logicalId = OpsworksEcsClusterLayerBuilder(logicalId)
    let opsworksGangliaLayer logicalId = OpsworksGangliaLayerBuilder(logicalId)
    let opsworksHaproxyLayer logicalId = OpsworksHaproxyLayerBuilder(logicalId)
    let opsworksInstance logicalId = OpsworksInstanceBuilder(logicalId)
    let opsworksJavaAppLayer logicalId = OpsworksJavaAppLayerBuilder(logicalId)
    let opsworksMemcachedLayer logicalId = OpsworksMemcachedLayerBuilder(logicalId)
    let opsworksMysqlLayer logicalId = OpsworksMysqlLayerBuilder(logicalId)
    let opsworksNodejsAppLayer logicalId = OpsworksNodejsAppLayerBuilder(logicalId)
    let opsworksPermission logicalId = OpsworksPermissionBuilder(logicalId)
    let opsworksPhpAppLayer logicalId = OpsworksPhpAppLayerBuilder(logicalId)
    let opsworksRailsAppLayer logicalId = OpsworksRailsAppLayerBuilder(logicalId)
    let opsworksRdsDbInstance logicalId = OpsworksRdsDbInstanceBuilder(logicalId)
    let opsworksStack logicalId = OpsworksStackBuilder(logicalId)
    let opsworksStaticWebLayer logicalId = OpsworksStaticWebLayerBuilder(logicalId)
    let opsworksUserProfile logicalId = OpsworksUserProfileBuilder(logicalId)
    let organizationsAccount logicalId = OrganizationsAccountBuilder(logicalId)
    let organizationsDelegatedAdministrator logicalId = OrganizationsDelegatedAdministratorBuilder(logicalId)
    let organizationsOrganization logicalId = OrganizationsOrganizationBuilder(logicalId)
    let organizationsOrganizationalUnit logicalId = OrganizationsOrganizationalUnitBuilder(logicalId)
    let organizationsPolicy logicalId = OrganizationsPolicyBuilder(logicalId)
    let organizationsPolicyAttachment logicalId = OrganizationsPolicyAttachmentBuilder(logicalId)
    let organizationsResourcePolicy logicalId = OrganizationsResourcePolicyBuilder(logicalId)
    let osisPipeline logicalId = OsisPipelineBuilder(logicalId)
    let paymentcryptographyKey logicalId = PaymentcryptographyKeyBuilder(logicalId)
    let paymentcryptographyKeyAlias logicalId = PaymentcryptographyKeyAliasBuilder(logicalId)
    let pinpointAdmChannel logicalId = PinpointAdmChannelBuilder(logicalId)
    let pinpointApnsChannel logicalId = PinpointApnsChannelBuilder(logicalId)
    let pinpointApnsSandboxChannel logicalId = PinpointApnsSandboxChannelBuilder(logicalId)
    let pinpointApnsVoipChannel logicalId = PinpointApnsVoipChannelBuilder(logicalId)
    let pinpointApnsVoipSandboxChannel logicalId = PinpointApnsVoipSandboxChannelBuilder(logicalId)
    let pinpointApp logicalId = PinpointAppBuilder(logicalId)
    let pinpointBaiduChannel logicalId = PinpointBaiduChannelBuilder(logicalId)
    let pinpointEmailChannel logicalId = PinpointEmailChannelBuilder(logicalId)
    let pinpointEmailTemplate logicalId = PinpointEmailTemplateBuilder(logicalId)
    let pinpointEventStream logicalId = PinpointEventStreamBuilder(logicalId)
    let pinpointGcmChannel logicalId = PinpointGcmChannelBuilder(logicalId)
    let pinpointSmsChannel logicalId = PinpointSmsChannelBuilder(logicalId)
    let pinpointsmsvoicev2ConfigurationSet logicalId = Pinpointsmsvoicev2ConfigurationSetBuilder(logicalId)
    let pinpointsmsvoicev2OptOutList logicalId = Pinpointsmsvoicev2OptOutListBuilder(logicalId)
    let pinpointsmsvoicev2PhoneNumber logicalId = Pinpointsmsvoicev2PhoneNumberBuilder(logicalId)
    let pipesPipe logicalId = PipesPipeBuilder(logicalId)
    let placementGroup logicalId = PlacementGroupBuilder(logicalId)
    let prometheusAlertManagerDefinition logicalId = PrometheusAlertManagerDefinitionBuilder(logicalId)
    let prometheusRuleGroupNamespace logicalId = PrometheusRuleGroupNamespaceBuilder(logicalId)
    let prometheusScraper logicalId = PrometheusScraperBuilder(logicalId)
    let prometheusWorkspace logicalId = PrometheusWorkspaceBuilder(logicalId)
    let prometheusWorkspaceConfiguration logicalId = PrometheusWorkspaceConfigurationBuilder(logicalId)
    let provider logicalId = AwsProviderBuilder(logicalId)
    let proxyProtocolPolicy logicalId = ProxyProtocolPolicyBuilder(logicalId)
    let qbusinessApplication logicalId = QbusinessApplicationBuilder(logicalId)
    let qldbLedger logicalId = QldbLedgerBuilder(logicalId)
    let qldbStream logicalId = QldbStreamBuilder(logicalId)
    let quicksightAccountSettings logicalId = QuicksightAccountSettingsBuilder(logicalId)
    let quicksightAccountSubscription logicalId = QuicksightAccountSubscriptionBuilder(logicalId)
    let quicksightAnalysis logicalId = QuicksightAnalysisBuilder(logicalId)
    let quicksightDashboard logicalId = QuicksightDashboardBuilder(logicalId)
    let quicksightDataSet logicalId = QuicksightDataSetBuilder(logicalId)
    let quicksightDataSource logicalId = QuicksightDataSourceBuilder(logicalId)
    let quicksightFolder logicalId = QuicksightFolderBuilder(logicalId)
    let quicksightFolderMembership logicalId = QuicksightFolderMembershipBuilder(logicalId)
    let quicksightGroup logicalId = QuicksightGroupBuilder(logicalId)
    let quicksightGroupMembership logicalId = QuicksightGroupMembershipBuilder(logicalId)
    let quicksightIamPolicyAssignment logicalId = QuicksightIamPolicyAssignmentBuilder(logicalId)
    let quicksightIngestion logicalId = QuicksightIngestionBuilder(logicalId)
    let quicksightNamespace logicalId = QuicksightNamespaceBuilder(logicalId)
    let quicksightRefreshSchedule logicalId = QuicksightRefreshScheduleBuilder(logicalId)
    let quicksightRoleMembership logicalId = QuicksightRoleMembershipBuilder(logicalId)
    let quicksightTemplate logicalId = QuicksightTemplateBuilder(logicalId)
    let quicksightTemplateAlias logicalId = QuicksightTemplateAliasBuilder(logicalId)
    let quicksightTheme logicalId = QuicksightThemeBuilder(logicalId)
    let quicksightUser logicalId = QuicksightUserBuilder(logicalId)
    let quicksightVpcConnection logicalId = QuicksightVpcConnectionBuilder(logicalId)
    let ramPrincipalAssociation logicalId = RamPrincipalAssociationBuilder(logicalId)
    let ramResourceAssociation logicalId = RamResourceAssociationBuilder(logicalId)
    let ramResourceShare logicalId = RamResourceShareBuilder(logicalId)
    let ramResourceShareAccepter logicalId = RamResourceShareAccepterBuilder(logicalId)
    let ramSharingWithOrganization logicalId = RamSharingWithOrganizationBuilder(logicalId)
    let rbinRule logicalId = RbinRuleBuilder(logicalId)
    let rdsCertificate logicalId = RdsCertificateBuilder(logicalId)
    let rdsCluster logicalId = RdsClusterBuilder(logicalId)
    let rdsClusterActivityStream logicalId = RdsClusterActivityStreamBuilder(logicalId)
    let rdsClusterEndpoint logicalId = RdsClusterEndpointBuilder(logicalId)
    let rdsClusterInstance logicalId = RdsClusterInstanceBuilder(logicalId)
    let rdsClusterParameterGroup logicalId = RdsClusterParameterGroupBuilder(logicalId)
    let rdsClusterRoleAssociation logicalId = RdsClusterRoleAssociationBuilder(logicalId)
    let rdsClusterSnapshotCopy logicalId = RdsClusterSnapshotCopyBuilder(logicalId)
    let rdsCustomDbEngineVersion logicalId = RdsCustomDbEngineVersionBuilder(logicalId)
    let rdsExportTask logicalId = RdsExportTaskBuilder(logicalId)
    let rdsGlobalCluster logicalId = RdsGlobalClusterBuilder(logicalId)
    let rdsInstanceState logicalId = RdsInstanceStateBuilder(logicalId)
    let rdsIntegration logicalId = RdsIntegrationBuilder(logicalId)
    let rdsReservedInstance logicalId = RdsReservedInstanceBuilder(logicalId)
    let rdsShardGroup logicalId = RdsShardGroupBuilder(logicalId)
    let redshiftAuthenticationProfile logicalId = RedshiftAuthenticationProfileBuilder(logicalId)
    let redshiftCluster logicalId = RedshiftClusterBuilder(logicalId)
    let redshiftClusterIamRoles logicalId = RedshiftClusterIamRolesBuilder(logicalId)
    let redshiftClusterSnapshot logicalId = RedshiftClusterSnapshotBuilder(logicalId)
    let redshiftDataShareAuthorization logicalId = RedshiftDataShareAuthorizationBuilder(logicalId)
    let redshiftDataShareConsumerAssociation logicalId = RedshiftDataShareConsumerAssociationBuilder(logicalId)
    let redshiftEndpointAccess logicalId = RedshiftEndpointAccessBuilder(logicalId)
    let redshiftEndpointAuthorization logicalId = RedshiftEndpointAuthorizationBuilder(logicalId)
    let redshiftEventSubscription logicalId = RedshiftEventSubscriptionBuilder(logicalId)
    let redshiftHsmClientCertificate logicalId = RedshiftHsmClientCertificateBuilder(logicalId)
    let redshiftHsmConfiguration logicalId = RedshiftHsmConfigurationBuilder(logicalId)
    let redshiftIntegration logicalId = RedshiftIntegrationBuilder(logicalId)
    let redshiftLogging logicalId = RedshiftLoggingBuilder(logicalId)
    let redshiftParameterGroup logicalId = RedshiftParameterGroupBuilder(logicalId)
    let redshiftPartner logicalId = RedshiftPartnerBuilder(logicalId)
    let redshiftResourcePolicy logicalId = RedshiftResourcePolicyBuilder(logicalId)
    let redshiftScheduledAction logicalId = RedshiftScheduledActionBuilder(logicalId)
    let redshiftSnapshotCopy logicalId = RedshiftSnapshotCopyBuilder(logicalId)
    let redshiftSnapshotCopyGrant logicalId = RedshiftSnapshotCopyGrantBuilder(logicalId)
    let redshiftSnapshotSchedule logicalId = RedshiftSnapshotScheduleBuilder(logicalId)
    let redshiftSnapshotScheduleAssociation logicalId = RedshiftSnapshotScheduleAssociationBuilder(logicalId)
    let redshiftSubnetGroup logicalId = RedshiftSubnetGroupBuilder(logicalId)
    let redshiftUsageLimit logicalId = RedshiftUsageLimitBuilder(logicalId)
    let redshiftdataStatement logicalId = RedshiftdataStatementBuilder(logicalId)
    let redshiftserverlessCustomDomainAssociation logicalId = RedshiftserverlessCustomDomainAssociationBuilder(logicalId)
    let redshiftserverlessEndpointAccess logicalId = RedshiftserverlessEndpointAccessBuilder(logicalId)
    let redshiftserverlessNamespace logicalId = RedshiftserverlessNamespaceBuilder(logicalId)
    let redshiftserverlessResourcePolicy logicalId = RedshiftserverlessResourcePolicyBuilder(logicalId)
    let redshiftserverlessSnapshot logicalId = RedshiftserverlessSnapshotBuilder(logicalId)
    let redshiftserverlessUsageLimit logicalId = RedshiftserverlessUsageLimitBuilder(logicalId)
    let redshiftserverlessWorkgroup logicalId = RedshiftserverlessWorkgroupBuilder(logicalId)
    let rekognitionCollection logicalId = RekognitionCollectionBuilder(logicalId)
    let rekognitionProject logicalId = RekognitionProjectBuilder(logicalId)
    let rekognitionStreamProcessor logicalId = RekognitionStreamProcessorBuilder(logicalId)
    let resiliencehubResiliencyPolicy logicalId = ResiliencehubResiliencyPolicyBuilder(logicalId)
    let resourceexplorer2Index logicalId = Resourceexplorer2IndexBuilder(logicalId)
    let resourceexplorer2View logicalId = Resourceexplorer2ViewBuilder(logicalId)
    let resourcegroupsGroup logicalId = ResourcegroupsGroupBuilder(logicalId)
    let resourcegroupsResource logicalId = ResourcegroupsResourceBuilder(logicalId)
    let rolesanywhereProfile logicalId = RolesanywhereProfileBuilder(logicalId)
    let rolesanywhereTrustAnchor logicalId = RolesanywhereTrustAnchorBuilder(logicalId)
    let route logicalId = RouteBuilder(logicalId)
    let route53CidrCollection logicalId = Route53CidrCollectionBuilder(logicalId)
    let route53CidrLocation logicalId = Route53CidrLocationBuilder(logicalId)
    let route53DelegationSet logicalId = Route53DelegationSetBuilder(logicalId)
    let route53DomainsDelegationSignerRecord logicalId = Route53DomainsDelegationSignerRecordBuilder(logicalId)
    let route53DomainsDomain logicalId = Route53DomainsDomainBuilder(logicalId)
    let route53DomainsRegisteredDomain logicalId = Route53DomainsRegisteredDomainBuilder(logicalId)
    let route53HealthCheck logicalId = Route53HealthCheckBuilder(logicalId)
    let route53HostedZoneDnssec logicalId = Route53HostedZoneDnssecBuilder(logicalId)
    let route53KeySigningKey logicalId = Route53KeySigningKeyBuilder(logicalId)
    let route53ProfilesAssociation logicalId = Route53ProfilesAssociationBuilder(logicalId)
    let route53ProfilesProfile logicalId = Route53ProfilesProfileBuilder(logicalId)
    let route53ProfilesResourceAssociation logicalId = Route53ProfilesResourceAssociationBuilder(logicalId)
    let route53QueryLog logicalId = Route53QueryLogBuilder(logicalId)
    let route53Record logicalId = Route53RecordBuilder(logicalId)
    let route53RecordsExclusive logicalId = Route53RecordsExclusiveBuilder(logicalId)
    let route53RecoverycontrolconfigCluster logicalId = Route53RecoverycontrolconfigClusterBuilder(logicalId)
    let route53RecoverycontrolconfigControlPanel logicalId = Route53RecoverycontrolconfigControlPanelBuilder(logicalId)
    let route53RecoverycontrolconfigRoutingControl logicalId = Route53RecoverycontrolconfigRoutingControlBuilder(logicalId)
    let route53RecoverycontrolconfigSafetyRule logicalId = Route53RecoverycontrolconfigSafetyRuleBuilder(logicalId)
    let route53RecoveryreadinessCell logicalId = Route53RecoveryreadinessCellBuilder(logicalId)
    let route53RecoveryreadinessReadinessCheck logicalId = Route53RecoveryreadinessReadinessCheckBuilder(logicalId)
    let route53RecoveryreadinessRecoveryGroup logicalId = Route53RecoveryreadinessRecoveryGroupBuilder(logicalId)
    let route53RecoveryreadinessResourceSet logicalId = Route53RecoveryreadinessResourceSetBuilder(logicalId)
    let route53ResolverConfig logicalId = Route53ResolverConfigBuilder(logicalId)
    let route53ResolverDnssecConfig logicalId = Route53ResolverDnssecConfigBuilder(logicalId)
    let route53ResolverEndpoint logicalId = Route53ResolverEndpointBuilder(logicalId)
    let route53ResolverFirewallConfig logicalId = Route53ResolverFirewallConfigBuilder(logicalId)
    let route53ResolverFirewallDomainList logicalId = Route53ResolverFirewallDomainListBuilder(logicalId)
    let route53ResolverFirewallRule logicalId = Route53ResolverFirewallRuleBuilder(logicalId)
    let route53ResolverFirewallRuleGroup logicalId = Route53ResolverFirewallRuleGroupBuilder(logicalId)
    let route53ResolverFirewallRuleGroupAssociation logicalId = Route53ResolverFirewallRuleGroupAssociationBuilder(logicalId)
    let route53ResolverQueryLogConfig logicalId = Route53ResolverQueryLogConfigBuilder(logicalId)
    let route53ResolverQueryLogConfigAssociation logicalId = Route53ResolverQueryLogConfigAssociationBuilder(logicalId)
    let route53ResolverRule logicalId = Route53ResolverRuleBuilder(logicalId)
    let route53ResolverRuleAssociation logicalId = Route53ResolverRuleAssociationBuilder(logicalId)
    let route53TrafficPolicy logicalId = Route53TrafficPolicyBuilder(logicalId)
    let route53TrafficPolicyInstance logicalId = Route53TrafficPolicyInstanceBuilder(logicalId)
    let route53VpcAssociationAuthorization logicalId = Route53VpcAssociationAuthorizationBuilder(logicalId)
    let route53Zone logicalId = Route53ZoneBuilder(logicalId)
    let route53ZoneAssociation logicalId = Route53ZoneAssociationBuilder(logicalId)
    let routeTable logicalId = RouteTableBuilder(logicalId)
    let routeTableAssociation logicalId = RouteTableAssociationBuilder(logicalId)
    let rumAppMonitor logicalId = RumAppMonitorBuilder(logicalId)
    let rumMetricsDestination logicalId = RumMetricsDestinationBuilder(logicalId)
    let s3AccessPoint logicalId = S3AccessPointBuilder(logicalId)
    let s3AccountPublicAccessBlock logicalId = S3AccountPublicAccessBlockBuilder(logicalId)
    let s3Bucket logicalId = S3BucketBuilder(logicalId)
    let s3BucketAccelerateConfiguration logicalId = S3BucketAccelerateConfigurationBuilder(logicalId)
    let s3BucketAcl logicalId = S3BucketAclBuilder(logicalId)
    let s3BucketAnalyticsConfiguration logicalId = S3BucketAnalyticsConfigurationBuilder(logicalId)
    let s3BucketCorsConfiguration logicalId = S3BucketCorsConfigurationBuilder(logicalId)
    let s3BucketIntelligentTieringConfiguration logicalId = S3BucketIntelligentTieringConfigurationBuilder(logicalId)
    let s3BucketInventory logicalId = S3BucketInventoryBuilder(logicalId)
    let s3BucketLifecycleConfiguration logicalId = S3BucketLifecycleConfigurationBuilder(logicalId)
    let s3BucketLoggingA logicalId = S3BucketLoggingABuilder(logicalId)
    let s3BucketMetric logicalId = S3BucketMetricBuilder(logicalId)
    let s3BucketNotification logicalId = S3BucketNotificationBuilder(logicalId)
    let s3BucketObject logicalId = S3BucketObjectBuilder(logicalId)
    let s3BucketObjectLockConfigurationA logicalId = S3BucketObjectLockConfigurationABuilder(logicalId)
    let s3BucketOwnershipControls logicalId = S3BucketOwnershipControlsBuilder(logicalId)
    let s3BucketPolicy logicalId = S3BucketPolicyBuilder(logicalId)
    let s3BucketPublicAccessBlock logicalId = S3BucketPublicAccessBlockBuilder(logicalId)
    let s3BucketReplicationConfigurationA logicalId = S3BucketReplicationConfigurationABuilder(logicalId)
    let s3BucketRequestPaymentConfiguration logicalId = S3BucketRequestPaymentConfigurationBuilder(logicalId)
    let s3BucketServerSideEncryptionConfigurationA logicalId = S3BucketServerSideEncryptionConfigurationABuilder(logicalId)
    let s3BucketVersioningA logicalId = S3BucketVersioningABuilder(logicalId)
    let s3BucketWebsiteConfiguration logicalId = S3BucketWebsiteConfigurationBuilder(logicalId)
    let s3ControlAccessGrant logicalId = S3ControlAccessGrantBuilder(logicalId)
    let s3ControlAccessGrantsInstance logicalId = S3ControlAccessGrantsInstanceBuilder(logicalId)
    let s3ControlAccessGrantsInstanceResourcePolicy logicalId = S3ControlAccessGrantsInstanceResourcePolicyBuilder(logicalId)
    let s3ControlAccessGrantsLocation logicalId = S3ControlAccessGrantsLocationBuilder(logicalId)
    let s3ControlAccessPointPolicy logicalId = S3ControlAccessPointPolicyBuilder(logicalId)
    let s3ControlBucket logicalId = S3ControlBucketBuilder(logicalId)
    let s3ControlBucketLifecycleConfiguration logicalId = S3ControlBucketLifecycleConfigurationBuilder(logicalId)
    let s3ControlBucketPolicy logicalId = S3ControlBucketPolicyBuilder(logicalId)
    let s3ControlDirectoryBucketAccessPointScope logicalId = S3ControlDirectoryBucketAccessPointScopeBuilder(logicalId)
    let s3ControlMultiRegionAccessPoint logicalId = S3ControlMultiRegionAccessPointBuilder(logicalId)
    let s3ControlMultiRegionAccessPointPolicy logicalId = S3ControlMultiRegionAccessPointPolicyBuilder(logicalId)
    let s3ControlObjectLambdaAccessPoint logicalId = S3ControlObjectLambdaAccessPointBuilder(logicalId)
    let s3ControlObjectLambdaAccessPointPolicy logicalId = S3ControlObjectLambdaAccessPointPolicyBuilder(logicalId)
    let s3ControlStorageLensConfiguration logicalId = S3ControlStorageLensConfigurationBuilder(logicalId)
    let s3DirectoryBucket logicalId = S3DirectoryBucketBuilder(logicalId)
    let s3Object logicalId = S3ObjectBuilder(logicalId)
    let s3ObjectCopy logicalId = S3ObjectCopyBuilder(logicalId)
    let s3OutpostsEndpoint logicalId = S3OutpostsEndpointBuilder(logicalId)
    let s3TablesNamespace logicalId = S3TablesNamespaceBuilder(logicalId)
    let s3TablesTable logicalId = S3TablesTableBuilder(logicalId)
    let s3TablesTableBucket logicalId = S3TablesTableBucketBuilder(logicalId)
    let s3TablesTableBucketPolicy logicalId = S3TablesTableBucketPolicyBuilder(logicalId)
    let s3TablesTablePolicy logicalId = S3TablesTablePolicyBuilder(logicalId)
    let sagemakerApp logicalId = SagemakerAppBuilder(logicalId)
    let sagemakerAppImageConfig logicalId = SagemakerAppImageConfigBuilder(logicalId)
    let sagemakerCodeRepository logicalId = SagemakerCodeRepositoryBuilder(logicalId)
    let sagemakerDataQualityJobDefinition logicalId = SagemakerDataQualityJobDefinitionBuilder(logicalId)
    let sagemakerDevice logicalId = SagemakerDeviceBuilder(logicalId)
    let sagemakerDeviceFleet logicalId = SagemakerDeviceFleetBuilder(logicalId)
    let sagemakerDomain logicalId = SagemakerDomainBuilder(logicalId)
    let sagemakerEndpoint logicalId = SagemakerEndpointBuilder(logicalId)
    let sagemakerEndpointConfiguration logicalId = SagemakerEndpointConfigurationBuilder(logicalId)
    let sagemakerFeatureGroup logicalId = SagemakerFeatureGroupBuilder(logicalId)
    let sagemakerFlowDefinition logicalId = SagemakerFlowDefinitionBuilder(logicalId)
    let sagemakerHub logicalId = SagemakerHubBuilder(logicalId)
    let sagemakerHumanTaskUi logicalId = SagemakerHumanTaskUiBuilder(logicalId)
    let sagemakerImage logicalId = SagemakerImageBuilder(logicalId)
    let sagemakerImageVersion logicalId = SagemakerImageVersionBuilder(logicalId)
    let sagemakerMlflowTrackingServer logicalId = SagemakerMlflowTrackingServerBuilder(logicalId)
    let sagemakerModel logicalId = SagemakerModelBuilder(logicalId)
    let sagemakerModelPackageGroup logicalId = SagemakerModelPackageGroupBuilder(logicalId)
    let sagemakerModelPackageGroupPolicy logicalId = SagemakerModelPackageGroupPolicyBuilder(logicalId)
    let sagemakerMonitoringSchedule logicalId = SagemakerMonitoringScheduleBuilder(logicalId)
    let sagemakerNotebookInstance logicalId = SagemakerNotebookInstanceBuilder(logicalId)
    let sagemakerNotebookInstanceLifecycleConfiguration logicalId = SagemakerNotebookInstanceLifecycleConfigurationBuilder(logicalId)
    let sagemakerPipeline logicalId = SagemakerPipelineBuilder(logicalId)
    let sagemakerProject logicalId = SagemakerProjectBuilder(logicalId)
    let sagemakerServicecatalogPortfolioStatus logicalId = SagemakerServicecatalogPortfolioStatusBuilder(logicalId)
    let sagemakerSpace logicalId = SagemakerSpaceBuilder(logicalId)
    let sagemakerStudioLifecycleConfig logicalId = SagemakerStudioLifecycleConfigBuilder(logicalId)
    let sagemakerUserProfile logicalId = SagemakerUserProfileBuilder(logicalId)
    let sagemakerWorkforce logicalId = SagemakerWorkforceBuilder(logicalId)
    let sagemakerWorkteam logicalId = SagemakerWorkteamBuilder(logicalId)
    let schedulerSchedule logicalId = SchedulerScheduleBuilder(logicalId)
    let schedulerScheduleGroup logicalId = SchedulerScheduleGroupBuilder(logicalId)
    let schemasDiscoverer logicalId = SchemasDiscovererBuilder(logicalId)
    let schemasRegistry logicalId = SchemasRegistryBuilder(logicalId)
    let schemasRegistryPolicy logicalId = SchemasRegistryPolicyBuilder(logicalId)
    let schemasSchema logicalId = SchemasSchemaBuilder(logicalId)
    let secretsmanagerSecret logicalId = SecretsmanagerSecretBuilder(logicalId)
    let secretsmanagerSecretPolicy logicalId = SecretsmanagerSecretPolicyBuilder(logicalId)
    let secretsmanagerSecretRotation logicalId = SecretsmanagerSecretRotationBuilder(logicalId)
    let secretsmanagerSecretVersion logicalId = SecretsmanagerSecretVersionBuilder(logicalId)
    let securityGroup logicalId = SecurityGroupBuilder(logicalId)
    let securityGroupRule logicalId = SecurityGroupRuleBuilder(logicalId)
    let securityhubAccount logicalId = SecurityhubAccountBuilder(logicalId)
    let securityhubActionTarget logicalId = SecurityhubActionTargetBuilder(logicalId)
    let securityhubAutomationRule logicalId = SecurityhubAutomationRuleBuilder(logicalId)
    let securityhubConfigurationPolicy logicalId = SecurityhubConfigurationPolicyBuilder(logicalId)
    let securityhubConfigurationPolicyAssociation logicalId = SecurityhubConfigurationPolicyAssociationBuilder(logicalId)
    let securityhubFindingAggregator logicalId = SecurityhubFindingAggregatorBuilder(logicalId)
    let securityhubInsight logicalId = SecurityhubInsightBuilder(logicalId)
    let securityhubInviteAccepter logicalId = SecurityhubInviteAccepterBuilder(logicalId)
    let securityhubMember logicalId = SecurityhubMemberBuilder(logicalId)
    let securityhubOrganizationAdminAccount logicalId = SecurityhubOrganizationAdminAccountBuilder(logicalId)
    let securityhubOrganizationConfiguration logicalId = SecurityhubOrganizationConfigurationBuilder(logicalId)
    let securityhubProductSubscription logicalId = SecurityhubProductSubscriptionBuilder(logicalId)
    let securityhubStandardsControl logicalId = SecurityhubStandardsControlBuilder(logicalId)
    let securityhubStandardsControlAssociation logicalId = SecurityhubStandardsControlAssociationBuilder(logicalId)
    let securityhubStandardsSubscription logicalId = SecurityhubStandardsSubscriptionBuilder(logicalId)
    let securitylakeAwsLogSource logicalId = SecuritylakeAwsLogSourceBuilder(logicalId)
    let securitylakeCustomLogSource logicalId = SecuritylakeCustomLogSourceBuilder(logicalId)
    let securitylakeDataLake logicalId = SecuritylakeDataLakeBuilder(logicalId)
    let securitylakeSubscriber logicalId = SecuritylakeSubscriberBuilder(logicalId)
    let securitylakeSubscriberNotification logicalId = SecuritylakeSubscriberNotificationBuilder(logicalId)
    let serverlessapplicationrepositoryCloudformationStack logicalId = ServerlessapplicationrepositoryCloudformationStackBuilder(logicalId)
    let serviceDiscoveryHttpNamespace logicalId = ServiceDiscoveryHttpNamespaceBuilder(logicalId)
    let serviceDiscoveryInstance logicalId = ServiceDiscoveryInstanceBuilder(logicalId)
    let serviceDiscoveryPrivateDnsNamespace logicalId = ServiceDiscoveryPrivateDnsNamespaceBuilder(logicalId)
    let serviceDiscoveryPublicDnsNamespace logicalId = ServiceDiscoveryPublicDnsNamespaceBuilder(logicalId)
    let serviceDiscoveryService logicalId = ServiceDiscoveryServiceBuilder(logicalId)
    let servicecatalogBudgetResourceAssociation logicalId = ServicecatalogBudgetResourceAssociationBuilder(logicalId)
    let servicecatalogConstraint logicalId = ServicecatalogConstraintBuilder(logicalId)
    let servicecatalogOrganizationsAccess logicalId = ServicecatalogOrganizationsAccessBuilder(logicalId)
    let servicecatalogPortfolio logicalId = ServicecatalogPortfolioBuilder(logicalId)
    let servicecatalogPortfolioShare logicalId = ServicecatalogPortfolioShareBuilder(logicalId)
    let servicecatalogPrincipalPortfolioAssociation logicalId = ServicecatalogPrincipalPortfolioAssociationBuilder(logicalId)
    let servicecatalogProduct logicalId = ServicecatalogProductBuilder(logicalId)
    let servicecatalogProductPortfolioAssociation logicalId = ServicecatalogProductPortfolioAssociationBuilder(logicalId)
    let servicecatalogProvisionedProduct logicalId = ServicecatalogProvisionedProductBuilder(logicalId)
    let servicecatalogProvisioningArtifact logicalId = ServicecatalogProvisioningArtifactBuilder(logicalId)
    let servicecatalogServiceAction logicalId = ServicecatalogServiceActionBuilder(logicalId)
    let servicecatalogTagOption logicalId = ServicecatalogTagOptionBuilder(logicalId)
    let servicecatalogTagOptionResourceAssociation logicalId = ServicecatalogTagOptionResourceAssociationBuilder(logicalId)
    let servicecatalogappregistryApplication logicalId = ServicecatalogappregistryApplicationBuilder(logicalId)
    let servicecatalogappregistryAttributeGroup logicalId = ServicecatalogappregistryAttributeGroupBuilder(logicalId)
    let servicecatalogappregistryAttributeGroupAssociation logicalId = ServicecatalogappregistryAttributeGroupAssociationBuilder(logicalId)
    let servicequotasServiceQuota logicalId = ServicequotasServiceQuotaBuilder(logicalId)
    let servicequotasTemplate logicalId = ServicequotasTemplateBuilder(logicalId)
    let servicequotasTemplateAssociation logicalId = ServicequotasTemplateAssociationBuilder(logicalId)
    let sesActiveReceiptRuleSet logicalId = SesActiveReceiptRuleSetBuilder(logicalId)
    let sesConfigurationSet logicalId = SesConfigurationSetBuilder(logicalId)
    let sesDomainDkim logicalId = SesDomainDkimBuilder(logicalId)
    let sesDomainIdentity logicalId = SesDomainIdentityBuilder(logicalId)
    let sesDomainIdentityVerification logicalId = SesDomainIdentityVerificationBuilder(logicalId)
    let sesDomainMailFrom logicalId = SesDomainMailFromBuilder(logicalId)
    let sesEmailIdentity logicalId = SesEmailIdentityBuilder(logicalId)
    let sesEventDestination logicalId = SesEventDestinationBuilder(logicalId)
    let sesIdentityNotificationTopic logicalId = SesIdentityNotificationTopicBuilder(logicalId)
    let sesIdentityPolicy logicalId = SesIdentityPolicyBuilder(logicalId)
    let sesReceiptFilter logicalId = SesReceiptFilterBuilder(logicalId)
    let sesReceiptRule logicalId = SesReceiptRuleBuilder(logicalId)
    let sesReceiptRuleSet logicalId = SesReceiptRuleSetBuilder(logicalId)
    let sesTemplate logicalId = SesTemplateBuilder(logicalId)
    let sesv2AccountSuppressionAttributes logicalId = Sesv2AccountSuppressionAttributesBuilder(logicalId)
    let sesv2AccountVdmAttributes logicalId = Sesv2AccountVdmAttributesBuilder(logicalId)
    let sesv2ConfigurationSet logicalId = Sesv2ConfigurationSetBuilder(logicalId)
    let sesv2ConfigurationSetEventDestination logicalId = Sesv2ConfigurationSetEventDestinationBuilder(logicalId)
    let sesv2ContactList logicalId = Sesv2ContactListBuilder(logicalId)
    let sesv2DedicatedIpAssignment logicalId = Sesv2DedicatedIpAssignmentBuilder(logicalId)
    let sesv2DedicatedIpPool logicalId = Sesv2DedicatedIpPoolBuilder(logicalId)
    let sesv2EmailIdentity logicalId = Sesv2EmailIdentityBuilder(logicalId)
    let sesv2EmailIdentityFeedbackAttributes logicalId = Sesv2EmailIdentityFeedbackAttributesBuilder(logicalId)
    let sesv2EmailIdentityMailFromAttributes logicalId = Sesv2EmailIdentityMailFromAttributesBuilder(logicalId)
    let sesv2EmailIdentityPolicy logicalId = Sesv2EmailIdentityPolicyBuilder(logicalId)
    let sfnActivity logicalId = SfnActivityBuilder(logicalId)
    let sfnAlias logicalId = SfnAliasBuilder(logicalId)
    let sfnStateMachine logicalId = SfnStateMachineBuilder(logicalId)
    let shieldApplicationLayerAutomaticResponse logicalId = ShieldApplicationLayerAutomaticResponseBuilder(logicalId)
    let shieldDrtAccessLogBucketAssociation logicalId = ShieldDrtAccessLogBucketAssociationBuilder(logicalId)
    let shieldDrtAccessRoleArnAssociation logicalId = ShieldDrtAccessRoleArnAssociationBuilder(logicalId)
    let shieldProactiveEngagement logicalId = ShieldProactiveEngagementBuilder(logicalId)
    let shieldProtection logicalId = ShieldProtectionBuilder(logicalId)
    let shieldProtectionGroup logicalId = ShieldProtectionGroupBuilder(logicalId)
    let shieldProtectionHealthCheckAssociation logicalId = ShieldProtectionHealthCheckAssociationBuilder(logicalId)
    let shieldSubscription logicalId = ShieldSubscriptionBuilder(logicalId)
    let signerSigningJob logicalId = SignerSigningJobBuilder(logicalId)
    let signerSigningProfile logicalId = SignerSigningProfileBuilder(logicalId)
    let signerSigningProfilePermission logicalId = SignerSigningProfilePermissionBuilder(logicalId)
    let simpledbDomain logicalId = SimpledbDomainBuilder(logicalId)
    let snapshotCreateVolumePermission logicalId = SnapshotCreateVolumePermissionBuilder(logicalId)
    let snsPlatformApplication logicalId = SnsPlatformApplicationBuilder(logicalId)
    let snsSmsPreferences logicalId = SnsSmsPreferencesBuilder(logicalId)
    let snsTopic logicalId = SnsTopicBuilder(logicalId)
    let snsTopicDataProtectionPolicy logicalId = SnsTopicDataProtectionPolicyBuilder(logicalId)
    let snsTopicPolicy logicalId = SnsTopicPolicyBuilder(logicalId)
    let snsTopicSubscription logicalId = SnsTopicSubscriptionBuilder(logicalId)
    let spotDatafeedSubscription logicalId = SpotDatafeedSubscriptionBuilder(logicalId)
    let spotFleetRequest logicalId = SpotFleetRequestBuilder(logicalId)
    let spotInstanceRequest logicalId = SpotInstanceRequestBuilder(logicalId)
    let sqsQueue logicalId = SqsQueueBuilder(logicalId)
    let sqsQueuePolicy logicalId = SqsQueuePolicyBuilder(logicalId)
    let sqsQueueRedriveAllowPolicy logicalId = SqsQueueRedriveAllowPolicyBuilder(logicalId)
    let sqsQueueRedrivePolicy logicalId = SqsQueueRedrivePolicyBuilder(logicalId)
    let ssmActivation logicalId = SsmActivationBuilder(logicalId)
    let ssmAssociation logicalId = SsmAssociationBuilder(logicalId)
    let ssmDefaultPatchBaseline logicalId = SsmDefaultPatchBaselineBuilder(logicalId)
    let ssmDocument logicalId = SsmDocumentBuilder(logicalId)
    let ssmMaintenanceWindow logicalId = SsmMaintenanceWindowBuilder(logicalId)
    let ssmMaintenanceWindowTarget logicalId = SsmMaintenanceWindowTargetBuilder(logicalId)
    let ssmMaintenanceWindowTask logicalId = SsmMaintenanceWindowTaskBuilder(logicalId)
    let ssmParameter logicalId = SsmParameterBuilder(logicalId)
    let ssmPatchBaseline logicalId = SsmPatchBaselineBuilder(logicalId)
    let ssmPatchGroup logicalId = SsmPatchGroupBuilder(logicalId)
    let ssmResourceDataSync logicalId = SsmResourceDataSyncBuilder(logicalId)
    let ssmServiceSetting logicalId = SsmServiceSettingBuilder(logicalId)
    let ssmcontactsContact logicalId = SsmcontactsContactBuilder(logicalId)
    let ssmcontactsContactChannel logicalId = SsmcontactsContactChannelBuilder(logicalId)
    let ssmcontactsPlan logicalId = SsmcontactsPlanBuilder(logicalId)
    let ssmcontactsRotation logicalId = SsmcontactsRotationBuilder(logicalId)
    let ssmincidentsReplicationSet logicalId = SsmincidentsReplicationSetBuilder(logicalId)
    let ssmincidentsResponsePlan logicalId = SsmincidentsResponsePlanBuilder(logicalId)
    let ssmquicksetupConfigurationManager logicalId = SsmquicksetupConfigurationManagerBuilder(logicalId)
    let ssoadminAccountAssignment logicalId = SsoadminAccountAssignmentBuilder(logicalId)
    let ssoadminApplication logicalId = SsoadminApplicationBuilder(logicalId)
    let ssoadminApplicationAccessScope logicalId = SsoadminApplicationAccessScopeBuilder(logicalId)
    let ssoadminApplicationAssignment logicalId = SsoadminApplicationAssignmentBuilder(logicalId)
    let ssoadminApplicationAssignmentConfiguration logicalId = SsoadminApplicationAssignmentConfigurationBuilder(logicalId)
    let ssoadminCustomerManagedPolicyAttachment logicalId = SsoadminCustomerManagedPolicyAttachmentBuilder(logicalId)
    let ssoadminInstanceAccessControlAttributes logicalId = SsoadminInstanceAccessControlAttributesBuilder(logicalId)
    let ssoadminManagedPolicyAttachment logicalId = SsoadminManagedPolicyAttachmentBuilder(logicalId)
    let ssoadminPermissionSet logicalId = SsoadminPermissionSetBuilder(logicalId)
    let ssoadminPermissionSetInlinePolicy logicalId = SsoadminPermissionSetInlinePolicyBuilder(logicalId)
    let ssoadminPermissionsBoundaryAttachment logicalId = SsoadminPermissionsBoundaryAttachmentBuilder(logicalId)
    let ssoadminTrustedTokenIssuer logicalId = SsoadminTrustedTokenIssuerBuilder(logicalId)
    let storagegatewayCache logicalId = StoragegatewayCacheBuilder(logicalId)
    let storagegatewayCachedIscsiVolume logicalId = StoragegatewayCachedIscsiVolumeBuilder(logicalId)
    let storagegatewayFileSystemAssociation logicalId = StoragegatewayFileSystemAssociationBuilder(logicalId)
    let storagegatewayGateway logicalId = StoragegatewayGatewayBuilder(logicalId)
    let storagegatewayNfsFileShare logicalId = StoragegatewayNfsFileShareBuilder(logicalId)
    let storagegatewaySmbFileShare logicalId = StoragegatewaySmbFileShareBuilder(logicalId)
    let storagegatewayStoredIscsiVolume logicalId = StoragegatewayStoredIscsiVolumeBuilder(logicalId)
    let storagegatewayTapePool logicalId = StoragegatewayTapePoolBuilder(logicalId)
    let storagegatewayUploadBuffer logicalId = StoragegatewayUploadBufferBuilder(logicalId)
    let storagegatewayWorkingStorage logicalId = StoragegatewayWorkingStorageBuilder(logicalId)
    let subnet logicalId = SubnetBuilder(logicalId)
    let swfDomain logicalId = SwfDomainBuilder(logicalId)
    let syntheticsCanary logicalId = SyntheticsCanaryBuilder(logicalId)
    let syntheticsGroup logicalId = SyntheticsGroupBuilder(logicalId)
    let syntheticsGroupAssociation logicalId = SyntheticsGroupAssociationBuilder(logicalId)
    let timestreaminfluxdbDbInstance logicalId = TimestreaminfluxdbDbInstanceBuilder(logicalId)
    let timestreamqueryScheduledQuery logicalId = TimestreamqueryScheduledQueryBuilder(logicalId)
    let timestreamwriteDatabase logicalId = TimestreamwriteDatabaseBuilder(logicalId)
    let timestreamwriteTable logicalId = TimestreamwriteTableBuilder(logicalId)
    let transcribeLanguageModel logicalId = TranscribeLanguageModelBuilder(logicalId)
    let transcribeMedicalVocabulary logicalId = TranscribeMedicalVocabularyBuilder(logicalId)
    let transcribeVocabulary logicalId = TranscribeVocabularyBuilder(logicalId)
    let transcribeVocabularyFilter logicalId = TranscribeVocabularyFilterBuilder(logicalId)
    let transferAccess logicalId = TransferAccessBuilder(logicalId)
    let transferAgreement logicalId = TransferAgreementBuilder(logicalId)
    let transferCertificate logicalId = TransferCertificateBuilder(logicalId)
    let transferConnector logicalId = TransferConnectorBuilder(logicalId)
    let transferProfile logicalId = TransferProfileBuilder(logicalId)
    let transferServer logicalId = TransferServerBuilder(logicalId)
    let transferSshKey logicalId = TransferSshKeyBuilder(logicalId)
    let transferTag logicalId = TransferTagBuilder(logicalId)
    let transferUser logicalId = TransferUserBuilder(logicalId)
    let transferWorkflow logicalId = TransferWorkflowBuilder(logicalId)
    let verifiedaccessEndpoint logicalId = VerifiedaccessEndpointBuilder(logicalId)
    let verifiedaccessGroup logicalId = VerifiedaccessGroupBuilder(logicalId)
    let verifiedaccessInstance logicalId = VerifiedaccessInstanceBuilder(logicalId)
    let verifiedaccessInstanceLoggingConfiguration logicalId = VerifiedaccessInstanceLoggingConfigurationBuilder(logicalId)
    let verifiedaccessInstanceTrustProviderAttachment logicalId = VerifiedaccessInstanceTrustProviderAttachmentBuilder(logicalId)
    let verifiedaccessTrustProvider logicalId = VerifiedaccessTrustProviderBuilder(logicalId)
    let verifiedpermissionsIdentitySource logicalId = VerifiedpermissionsIdentitySourceBuilder(logicalId)
    let verifiedpermissionsPolicy logicalId = VerifiedpermissionsPolicyBuilder(logicalId)
    let verifiedpermissionsPolicyStore logicalId = VerifiedpermissionsPolicyStoreBuilder(logicalId)
    let verifiedpermissionsPolicyTemplate logicalId = VerifiedpermissionsPolicyTemplateBuilder(logicalId)
    let verifiedpermissionsSchema logicalId = VerifiedpermissionsSchemaBuilder(logicalId)
    let volumeAttachment logicalId = VolumeAttachmentBuilder(logicalId)
    let vpc logicalId = VpcBuilder(logicalId)
    let vpcBlockPublicAccessExclusion logicalId = VpcBlockPublicAccessExclusionBuilder(logicalId)
    let vpcBlockPublicAccessOptions logicalId = VpcBlockPublicAccessOptionsBuilder(logicalId)
    let vpcDhcpOptions logicalId = VpcDhcpOptionsBuilder(logicalId)
    let vpcDhcpOptionsAssociation logicalId = VpcDhcpOptionsAssociationBuilder(logicalId)
    let vpcEndpoint logicalId = VpcEndpointBuilder(logicalId)
    let vpcEndpointConnectionAccepter logicalId = VpcEndpointConnectionAccepterBuilder(logicalId)
    let vpcEndpointConnectionNotification logicalId = VpcEndpointConnectionNotificationBuilder(logicalId)
    let vpcEndpointPolicy logicalId = VpcEndpointPolicyBuilder(logicalId)
    let vpcEndpointPrivateDns logicalId = VpcEndpointPrivateDnsBuilder(logicalId)
    let vpcEndpointRouteTableAssociation logicalId = VpcEndpointRouteTableAssociationBuilder(logicalId)
    let vpcEndpointSecurityGroupAssociation logicalId = VpcEndpointSecurityGroupAssociationBuilder(logicalId)
    let vpcEndpointService logicalId = VpcEndpointServiceBuilder(logicalId)
    let vpcEndpointServiceAllowedPrincipal logicalId = VpcEndpointServiceAllowedPrincipalBuilder(logicalId)
    let vpcEndpointServicePrivateDnsVerification logicalId = VpcEndpointServicePrivateDnsVerificationBuilder(logicalId)
    let vpcEndpointSubnetAssociation logicalId = VpcEndpointSubnetAssociationBuilder(logicalId)
    let vpcIpam logicalId = VpcIpamBuilder(logicalId)
    let vpcIpamOrganizationAdminAccount logicalId = VpcIpamOrganizationAdminAccountBuilder(logicalId)
    let vpcIpamPool logicalId = VpcIpamPoolBuilder(logicalId)
    let vpcIpamPoolCidr logicalId = VpcIpamPoolCidrBuilder(logicalId)
    let vpcIpamPoolCidrAllocation logicalId = VpcIpamPoolCidrAllocationBuilder(logicalId)
    let vpcIpamPreviewNextCidr logicalId = VpcIpamPreviewNextCidrBuilder(logicalId)
    let vpcIpamResourceDiscovery logicalId = VpcIpamResourceDiscoveryBuilder(logicalId)
    let vpcIpamResourceDiscoveryAssociation logicalId = VpcIpamResourceDiscoveryAssociationBuilder(logicalId)
    let vpcIpamScope logicalId = VpcIpamScopeBuilder(logicalId)
    let vpcIpv4CidrBlockAssociation logicalId = VpcIpv4CidrBlockAssociationBuilder(logicalId)
    let vpcIpv6CidrBlockAssociation logicalId = VpcIpv6CidrBlockAssociationBuilder(logicalId)
    let vpcNetworkPerformanceMetricSubscription logicalId = VpcNetworkPerformanceMetricSubscriptionBuilder(logicalId)
    let vpcPeeringConnection logicalId = VpcPeeringConnectionBuilder(logicalId)
    let vpcPeeringConnectionAccepterA logicalId = VpcPeeringConnectionAccepterABuilder(logicalId)
    let vpcPeeringConnectionOptions logicalId = VpcPeeringConnectionOptionsBuilder(logicalId)
    let vpcRouteServer logicalId = VpcRouteServerBuilder(logicalId)
    let vpcRouteServerEndpoint logicalId = VpcRouteServerEndpointBuilder(logicalId)
    let vpcRouteServerPeer logicalId = VpcRouteServerPeerBuilder(logicalId)
    let vpcRouteServerPropagation logicalId = VpcRouteServerPropagationBuilder(logicalId)
    let vpcRouteServerVpcAssociation logicalId = VpcRouteServerVpcAssociationBuilder(logicalId)
    let vpcSecurityGroupEgressRule logicalId = VpcSecurityGroupEgressRuleBuilder(logicalId)
    let vpcSecurityGroupIngressRule logicalId = VpcSecurityGroupIngressRuleBuilder(logicalId)
    let vpcSecurityGroupVpcAssociation logicalId = VpcSecurityGroupVpcAssociationBuilder(logicalId)
    let vpclatticeAccessLogSubscription logicalId = VpclatticeAccessLogSubscriptionBuilder(logicalId)
    let vpclatticeAuthPolicy logicalId = VpclatticeAuthPolicyBuilder(logicalId)
    let vpclatticeListener logicalId = VpclatticeListenerBuilder(logicalId)
    let vpclatticeListenerRule logicalId = VpclatticeListenerRuleBuilder(logicalId)
    let vpclatticeResourceConfiguration logicalId = VpclatticeResourceConfigurationBuilder(logicalId)
    let vpclatticeResourceGateway logicalId = VpclatticeResourceGatewayBuilder(logicalId)
    let vpclatticeResourcePolicy logicalId = VpclatticeResourcePolicyBuilder(logicalId)
    let vpclatticeService logicalId = VpclatticeServiceBuilder(logicalId)
    let vpclatticeServiceNetwork logicalId = VpclatticeServiceNetworkBuilder(logicalId)
    let vpclatticeServiceNetworkResourceAssociation logicalId = VpclatticeServiceNetworkResourceAssociationBuilder(logicalId)
    let vpclatticeServiceNetworkServiceAssociation logicalId = VpclatticeServiceNetworkServiceAssociationBuilder(logicalId)
    let vpclatticeServiceNetworkVpcAssociation logicalId = VpclatticeServiceNetworkVpcAssociationBuilder(logicalId)
    let vpclatticeTargetGroup logicalId = VpclatticeTargetGroupBuilder(logicalId)
    let vpclatticeTargetGroupAttachment logicalId = VpclatticeTargetGroupAttachmentBuilder(logicalId)
    let vpnConnection logicalId = VpnConnectionBuilder(logicalId)
    let vpnConnectionRoute logicalId = VpnConnectionRouteBuilder(logicalId)
    let vpnGateway logicalId = VpnGatewayBuilder(logicalId)
    let vpnGatewayAttachment logicalId = VpnGatewayAttachmentBuilder(logicalId)
    let vpnGatewayRoutePropagation logicalId = VpnGatewayRoutePropagationBuilder(logicalId)
    let wafByteMatchSet logicalId = WafByteMatchSetBuilder(logicalId)
    let wafGeoMatchSet logicalId = WafGeoMatchSetBuilder(logicalId)
    let wafIpset logicalId = WafIpsetBuilder(logicalId)
    let wafRateBasedRule logicalId = WafRateBasedRuleBuilder(logicalId)
    let wafRegexMatchSet logicalId = WafRegexMatchSetBuilder(logicalId)
    let wafRegexPatternSet logicalId = WafRegexPatternSetBuilder(logicalId)
    let wafRule logicalId = WafRuleBuilder(logicalId)
    let wafRuleGroup logicalId = WafRuleGroupBuilder(logicalId)
    let wafSizeConstraintSet logicalId = WafSizeConstraintSetBuilder(logicalId)
    let wafSqlInjectionMatchSet logicalId = WafSqlInjectionMatchSetBuilder(logicalId)
    let wafWebAcl logicalId = WafWebAclBuilder(logicalId)
    let wafXssMatchSet logicalId = WafXssMatchSetBuilder(logicalId)
    let wafregionalByteMatchSet logicalId = WafregionalByteMatchSetBuilder(logicalId)
    let wafregionalGeoMatchSet logicalId = WafregionalGeoMatchSetBuilder(logicalId)
    let wafregionalIpset logicalId = WafregionalIpsetBuilder(logicalId)
    let wafregionalRateBasedRule logicalId = WafregionalRateBasedRuleBuilder(logicalId)
    let wafregionalRegexMatchSet logicalId = WafregionalRegexMatchSetBuilder(logicalId)
    let wafregionalRegexPatternSet logicalId = WafregionalRegexPatternSetBuilder(logicalId)
    let wafregionalRule logicalId = WafregionalRuleBuilder(logicalId)
    let wafregionalRuleGroup logicalId = WafregionalRuleGroupBuilder(logicalId)
    let wafregionalSizeConstraintSet logicalId = WafregionalSizeConstraintSetBuilder(logicalId)
    let wafregionalSqlInjectionMatchSet logicalId = WafregionalSqlInjectionMatchSetBuilder(logicalId)
    let wafregionalWebAcl logicalId = WafregionalWebAclBuilder(logicalId)
    let wafregionalWebAclAssociation logicalId = WafregionalWebAclAssociationBuilder(logicalId)
    let wafregionalXssMatchSet logicalId = WafregionalXssMatchSetBuilder(logicalId)
    let wafv2ApiKey logicalId = Wafv2ApiKeyBuilder(logicalId)
    let wafv2IpSet logicalId = Wafv2IpSetBuilder(logicalId)
    let wafv2RegexPatternSet logicalId = Wafv2RegexPatternSetBuilder(logicalId)
    let wafv2RuleGroup logicalId = Wafv2RuleGroupBuilder(logicalId)
    let wafv2WebAcl logicalId = Wafv2WebAclBuilder(logicalId)
    let wafv2WebAclAssociation logicalId = Wafv2WebAclAssociationBuilder(logicalId)
    let wafv2WebAclLoggingConfiguration logicalId = Wafv2WebAclLoggingConfigurationBuilder(logicalId)
    let worklinkFleet logicalId = WorklinkFleetBuilder(logicalId)
    let worklinkWebsiteCertificateAuthorityAssociation logicalId = WorklinkWebsiteCertificateAuthorityAssociationBuilder(logicalId)
    let workspacesConnectionAlias logicalId = WorkspacesConnectionAliasBuilder(logicalId)
    let workspacesDirectory logicalId = WorkspacesDirectoryBuilder(logicalId)
    let workspacesIpGroup logicalId = WorkspacesIpGroupBuilder(logicalId)
    let workspacesWorkspace logicalId = WorkspacesWorkspaceBuilder(logicalId)
    let workspaceswebBrowserSettings logicalId = WorkspaceswebBrowserSettingsBuilder(logicalId)
    let workspaceswebDataProtectionSettings logicalId = WorkspaceswebDataProtectionSettingsBuilder(logicalId)
    let workspaceswebIpAccessSettings logicalId = WorkspaceswebIpAccessSettingsBuilder(logicalId)
    let workspaceswebNetworkSettings logicalId = WorkspaceswebNetworkSettingsBuilder(logicalId)
    let workspaceswebUserAccessLoggingSettings logicalId = WorkspaceswebUserAccessLoggingSettingsBuilder(logicalId)
    let workspaceswebUserSettings logicalId = WorkspaceswebUserSettingsBuilder(logicalId)
    let xrayEncryptionConfig logicalId = XrayEncryptionConfigBuilder(logicalId)
    let xrayGroup logicalId = XrayGroupBuilder(logicalId)
    let xrayResourcePolicy logicalId = XrayResourcePolicyBuilder(logicalId)
    let xraySamplingRule logicalId = XraySamplingRuleBuilder(logicalId)
