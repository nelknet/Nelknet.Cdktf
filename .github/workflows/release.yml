name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: 1
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - name: Determine package version
        id: version
        run: |
          VERSION=$(python - <<'PY'
import pathlib
from xml.etree import ElementTree as ET
props = pathlib.Path('build/Version.props')
tree = ET.parse(props)
root = tree.getroot()
if root.tag.endswith('Project'):
    prop_group = root.find('PropertyGroup')
else:
    prop_group = root
version = None
for child in prop_group:
    if child.tag.endswith('NelknetCdktfVersion'):
        version = (child.text or '').strip()
        break
if not version:
    raise SystemExit('NelknetCdktfVersion not found in build/Version.props')
print(version)
PY
          )
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            TAG_NAME="${GITHUB_REF##*/}"
            if [ "${TAG_NAME#v}" != "$VERSION" ]; then
              echo "Tag $TAG_NAME does not match NelknetCdktfVersion $VERSION" >&2
              exit 1
            fi
          fi
          echo "Using package version $VERSION"
      - name: Bootstrap providers
        run: dotnet run --project tools/Nelknet.Cdktf.Bootstrap
      - name: Build (Release)
        run: dotnet build -c Release -p:ForceCodeGen=true
      - name: Pack packages
        run: |
          mkdir -p artifacts
          dotnet pack src/Core/Nelknet.Cdktf.Core/Nelknet.Cdktf.Core.fsproj -c Release --no-build -o artifacts
          dotnet pack src/Providers/Aws/Nelknet.Cdktf.Providers.Aws.fsproj -c Release --no-build -o artifacts
          dotnet pack src/Providers/Azurerm/Nelknet.Cdktf.Providers.Azurerm.fsproj -c Release --no-build -o artifacts
          dotnet pack src/Providers/Hcloud/Nelknet.Cdktf.Providers.Hcloud.fsproj -c Release --no-build -o artifacts
          dotnet pack src/Providers/Random/Nelknet.Cdktf.Providers.Random.fsproj -c Release --no-build -o artifacts
      - name: Ensure API key
        run: |
          if [ -z "${NUGET_API_KEY}" ]; then
            echo "NUGET_API_KEY is not set" >&2
            exit 1
          fi
      - name: Push packages
        run: dotnet nuget push artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key "$NUGET_API_KEY" --skip-duplicate
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/*.nupkg
